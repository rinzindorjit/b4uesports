Project: B4U Esports - Pi Network Integrated Marketplace & User Portal

1. Objective:
Develop a comprehensive, responsive web platform for B4U Esports that integrates Pi Network as a payment method, allowing users to purchase in-game currencies (UC for PUBG Mobile, Diamonds for Mobile Legends: Bang Bang) using Pi coins. The platform must include a user dashboard, admin panel, real-time price conversion, and full legal compliance.

Brand Assets Integration
B4U Esports Logo: https://b4uesports.com/wp-content/uploads/2025/04/cropped-Black_and_Blue_Simple_Creative_Illustrative_Dragons_E-Sport_Logo_20240720_103229_0000-removebg-preview.png

Pi Network Logo: https://b4uesports.com/wp-content/uploads/2025/04/PI.jpg

MLBB Logo: https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTT-Neggt-JpAh4eDx84JswmFwJMOa4pcfhqtcTcxtywIGC4IfB

PUBG Mobile Logo: https://cdn.midasbuy.com/images/pubgm_app-icon_512x512%281%29.e9f7efc0.png

PUBG Packages Image: Use for all PUBG packages:https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.midasbuy.com%2Fboku%2Fph%2Fshop%2Fpubgm&psig=AOvVaw1LeenLUb25CISM-DEUCAqL&ust=1758274765315000&source=images&cd=vfe&opi=89978449&ved=0CBUQjRxqFwoTCNCuwoiC4o8DFQAAAAAdAAAAABAE


MLBB Packages Image: Use for all MLBB packages: https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png

Core Page Structure & Design
Landing Page (Pre-Login)
Animated background with particle effects

Prominent "Sign In with Pi Network" button with proper Pi logo

Display of featured packages with hover effects PUBG Mobile and MLBB with their proper logo)
Below the main welcome message, a new "Why Choose Us?" section has been added, featuring the new icons and short descriptions for "Live Pricing," "Secure Payments," and "24/7 Support."
A "Featured Packages" section is now present, showcasing a few popular packages for both PUBG Mobile and MLBB, complete with their logos and real-time Pi pricing. The cards have the same interactive hover effect as in the dashboard.

Company information and value proposition

Testnet disclaimer clearly visible

User Dashboard (Post-Login)
User greeting with abbreviated Pi wallet address, username, 

Live Pi/USD price ticker (updating every 60 seconds)

Package shop with "Buy Now" buttons

Transaction history table

Profile management section(edit profile, upload profile photo, game selection PUBG or MLBB as all users dont play both games)

Admin Panel
Secure login separate from Pi authentication

User management with search and filtering

Transaction monitoring and status updates

Package management (CRUD operations)

Analytics dashboard

3. Pi Network Integration Implementation
Authentication Flow
Initialize Pi SDK with sandbox mode based on environment

Implement Pi.authenticate with required scopes (payments, username)

Create consent modal for data sharing permissions

Backend verification of access token via /me endpoint

User account creation/mapping with Pi UID

Payment Flow
Frontend prepares minimal payment request (amount, memo)

Backend validates and attaches metadata (type: backend)

Implement onReadyForServerApproval callback

Backend approves payment via /v2/payments/{paymentId}/approve

Implement onReadyForServerCompletion callback

Backend completes payment via /v2/payments/{paymentId}/complete

Security Measures
All API keys stored in environment variables

Input validation for numeric fields (UIDs, Zone IDs)

Passphrase hashing with bcrypt/argon2

HTTPS enforcement for all endpoints

Transaction logging with paymentId, txid, and uid

4. Package System & Real-Time Pricing
Package Definitions
PUBG UC Packages (USDT values):

60 UC (1.5000 USDT)

325 UC (6.5000 USDT)

660 UC (12.0000 USDT)

1800 UC (25.0000 USDT)

3850 UC (49.0000 USDT)

8100 UC (96.0000 USDT)

16200 UC (186.0000 USDT)

24300 UC (278.0000 USDT)

32400 UC (369.0000 USDT)

40500 UC (459.0000 USDT)

MLBB Diamond Packages (USDT values):

56 Diamonds (3.0000 USDT)

278 Diamonds (6.0000 USDT)

571 Diamonds (11.0000 USDT)

1783 Diamonds (33.0000 USDT)

3005 Diamonds (52.0000 USDT)

6012 Diamonds (99.0000 USDT)

12000 Diamonds (200.0000 USDT)

Display only Pi prices to users (hide USDT values)

5. User Experience & Interface Elements
Login & Authentication
Prominent "Sign In with Pi Network" button with Pi logo

Disclaimer: "Note: Transactions are currently processed on the Pi Testnet. No real Pi coins will be deducted from your mainnet wallet during purchases."

Consent modal for data sharing

User Profile Management
Required fields: Email, Contact Number (numeric only), Country (default: Bhutan), Language

Game-specific fields:

PUBG Mobile: IGN, UID (numeric only)

MLBB: User ID (numeric only), Zone ID (numeric only)

Optional: Referral code

Auto-filled from Pi: Username, Wallet Address (read-only)

Purchase Confirmation Flow
Package selection with clear display of Pi price

Game ID verification with editing capability

Payment confirmation with security notice

Passphrase or biometric authentication

Success/error messaging

Floating Country Selector
Draggable window interface

Flag emojis for visual recognition

Search functionality

Visual feedback for selected country

Smooth animations and responsive design

6. Notification System
Email Notifications
Instant confirmation upon purchase

Comprehensive details: game IDs, package, timestamp, transaction ID

Toast notifications for email delivery status

Error handling for email service issues

In-App Notifications
Payment success: "✅ Payment confirmed. Transaction ID: {txid}."

Payment canceled: "❌ Payment canceled. No Pi deducted."

Payment failed: "⚠️ Payment failed. Please retry."

Testnet indicator: Always show "TESTNET" label during testing

Technical Implementation Details
Frontend Components
Responsive design with mobile-first approach

Modern UI with animations and hover effects

Real-time price updates without page refresh

Form validation for numeric-only fields

Loading states for all transactions

Backend API Endpoints
POST /api/authenticate: Pi authentication handling

GET /api/packages: Retrieve available packages with real-time pricing

POST /api/payment/approve: Approve payment requests

POST /api/payment/complete: Complete payments

GET /api/transactions: Retrieve user transaction history

PUT /api/profile: Update user profile and game details

Database Schema
Users Collection:

piUID: String (unique)

username: String

email: String

phone: String

country: String (default: "Bhutan")

language: String

gameAccounts: Object (PUBG: {IGN, UID}, MLBB: {userID, zoneID})

referralCode: String (optional)

Transactions Collection:

paymentId: String

user: Reference to Users

package: Object (game, amount, usdtValue, piAmount)

status: String

txid: String

timestamp: Date

Packages Collection:

game: String (PUBG or MLBB)

inGameAmount: Number

usdtValue: Number

image: String

9. Testing & Deployment Plan
Testnet Testing
Use Test-Pi tokens for all transactions

Test all payment flows (success, cancel, failure)

Verify email notifications are working

Test responsive design on multiple devices

Validate all form submissions and error handling

Production Deployment
Switch sandbox mode to false

Update API keys to production values

Register production URL in Pi Developer Portal

Final testing with small transactions

Monitor performance and error rates

Maintenance
Regular database backups

Monitor transaction success rates

Update packages and pricing as needed

Security audits and updates

Support 
email : info@b4uesports.com
contact: +97517875099

Social Media Links and include accurate colorful hovering icons 

Facebook: https://www.facebook.com/b4uesports

YouTube: https://youtube.com/@b4uesports

TikTok: https://www.tiktok.com/b4uesports

Instagram: https://www.instagram.com/b4uesports

LinkedIn: https://www.linkedin.com/company/b4uesports/

© 2025 B4U Esports. All Rights Reserved.

Powered by Pi Network (include pi logo also)

A. User Authentication via Pi Network:

Implement Pi SDK for authentication.

Login Button: Prominently displayed with text: “Sign In with Pi Network” accompanied by the Pi logo. 

Disclaimer Note (placed near login button):
“Note: Transactions are currently processed on the Pi Testnet. No real Pi coins will be deducted from your mainnet wallet during purchases.”

Consent Modal: Upon first login, users must agree to share their Pi username and wallet address with B4U Esports to create an account.( neat and clean floating window popups)

B. User Profile & Game Details Collection:

Required Fields: Email @gmail.com, Contact Number don't show alphabet in users phone, all Country and make Bhutan by default, Language.

Game-Specific Fields (required before purchase):

PUBG Mobile: IGN (In-Game Name), UID (numeric only dont show alphabet in users phone).

MLBB: User ID (numeric only dont show alphabet in users phone), Zone ID (numeric only dont show alphabet in users phone).

Optional: Referral code.

Auto-filled from Pi (read-only): Pi Username, Pi Wallet Address.

C. Real-Time Pricing & Package Display:

API for Live Pi Price:
curl "https://api.coingecko.com/api/v3/simple/price?ids=pi-network&vs_currencies=usd&x_cg_demo_api_key=CG-z4MZkBd78fn7PgPhPYcKq1r4"

UI/UX: Display package options with live Pi prices updating every 60 seconds. The amount in Pi should be automatically selected when a package is chosen.

D. Transaction & User Dashboard:

Post-Login Dashboard Includes:

User greeting and Pi wallet address (abbreviated).

Live Pi/USD price ticker.

Package shop with “Buy Now” buttons.

Transaction history table: Date, Package, Status, Pi Amount, Transaction ID.

Profile management section to edit user details and game IDs.

E. Admin Panel:

Secure login (separate from Pi auth).

Features:

User management (view, search, filter users and their transactions).

Transaction monitoring and manual status updates.

Package management (CRUD operations for packages, setting game, in-game amount, and fixed USDT value).

Analytics dashboard (revenue, popular packages, user metrics).


Legal Links: Privacy Policy, Return/Refund Policy, Terms of Service, User Agreement, Data Protection Policy, Cookie Policy, FAQ, Company History.( with separate page and detailed explainations for all)
Refund Policy must state: “All sales of digital in-game currency are final and non-refundable.” ( with separate page and detailed explanations)

4. Technical Requirements:

Responsive Design: Fully functional on desktop, tablet, and mobile.

Security: All API keys stored server-side. Input validation for numeric fields (UIDs, Zone IDs).

Payment Flow: Integrate Pi SDK’s Pi.createPayment with server-side approval/completion handling.

Error Handling: User-friendly messages for payment failures/API issues.

5. Deliverables:

Production-ready responsive web application.

Secure backend with database.

User and admin front-end interfaces.

Documentation for system administration.

Drafts for all legal policy pages.

6. Additional Notes:

Use modern frameworks (e.g., React/Vue for frontend, Node.js/Django for backend).

Ensure cross-browser compatibility.

Implement SSL/HTTPS for all data transmissions.

Conduct thorough testing (unit, integration, UI/UX) before deployment.


All sensitive data must be stored in Vercel environment variables, and metadata type must be backend.
Requirement

1. Environment Setup
Hosting: Vercel.
Store sensitive credentials (e.g., Server API Key) in Vercel environment variables.
Backend functions must always read keys from process.env.
No sensitive data should appear in frontend code.
2. Authentication
Load Pi SDK (pi-sdk.js) on frontend.
Initialize with:
Testnet → sandbox: true
Mainnet → sandbox: false
Use Pi.authenticate(scopes, onIncompletePaymentFound) with scopes:
payments (mandatory)
username (optional, for display)
Frontend sends accessToken to backend.
Backend verifies using /me endpoint with Authorization: Bearer <accessToken>.
Always map uid from /me to internal user database.
3. Payments Flow
All metadata type = backend.
Flow:
1. User triggers payment → frontend prepares minimal request (amount, memo).
2. Backend validates order and attaches metadata securely.
3. On onReadyForServerApproval(paymentId) → frontend sends paymentId to backend.
4. Backend approves payment via /v2/payments/{paymentId}/approve (using Server API Key from env).
5. On onReadyForServerCompletion(paymentId, txid) → frontend sends to backend.
6. Backend completes payment via /v2/payments/{paymentId}/complete.
4. User Confirmation Layer
Before calling payment API:
Show notice popup with:
Order details
Amount in Pi and packages
Memo
Testnet/Mainnet indicator
Require passphrase entry (stored hashed in DB).
Support biometric confirmation (fingerprint, FaceID, WebAuthn).
Backend must validate passphrase before approving payment.
5. Notices & User Experience
Before payment:
“⚠️ You are about to pay {amount} Pi for {memo}. Please confirm with passphrase or biometrics.”
After success:
“✅ Payment confirmed. Transaction ID: {txid}.”
If canceled:
“❌ Payment canceled. No Pi deducted.”
If failed:
“⚠️ Payment failed. Please retry.”
On Testnet:
Always show TESTNET label in notices.
6. Security Best Practices
Server API Key only stored in Vercel env vars.
Validate all amount and metadata against backend DB.
Do not trust frontend values.
Use idempotency for approve/complete.
Encrypt passphrases with bcrypt/argon2.
Enable HTTPS for all endpoints.
Log every transaction with paymentId, txid, and uid.
7. Database Concept
Users table → store uid, username, hashed passphrase, optional biometric key.
Payments table → store paymentId, amount, status, txid, backend metadata.
Backend handles metadata validation, not frontend.
8. Testing & Migration
Start on Testnet (sandbox: true) with Development URL in Developer Portal.
Use Test-Pi tokens for trial payments.
Test flows:
Successful payment
Cancelation
Wrong passphrase
Biometric rejection
Double-submit protection
After testing:
Switch sandbox: false.
Register Production URL in Developer Portal.
Deploy on Vercel with Production env vars.
9. Deployment Notes
Development: Testnet + Dev URL + sandbox true.
Production: Mainnet + Production URL + sandbox false.
Ensure callback URLs match Developer Portal entries.
Confirm Pi Browser compatibility on mobile.
Deliverables
1. Explanation of frontend SDK integration (Testnet & Mainnet).
2. Explanation of backend responsibilities (/me, /approve, /complete).
3. Complete payment flow with backend metadata type.
4. User journey with notices, passphrase, biometrics, confirmations.
5. Security checklist for both Testnet and Mainnet.
6. Migration checklist (Testnet → Mainnet).
7. Deployment notes for Vercel with environment variables.
For a secure payment flow where your server handles transaction metadata, the Pi platform needs to know your backend's URL
provide backend url to support metadata support type backend
The footer will be updated to display the requested copyright notice for 2025 and a "Powered by Pi Network" attribution.
The landing page itself will be enhanced with a new section that highlights key features like "Live Pricing," "Secure Payments," and "Instant Delivery," complete with custom icons.
👉 Use this prompt to generate a complete Pi Network integration for webapps, where the same flow works on Testnet first, and then on Mainnet by just changing sandbox: true → false.

<script src="https://sdk.minepi.com/pi-sdk.js"></script>
<script>
  Pi.init({ version: "2.0" });
</script>

<script src="https://sdk.minepi.com/pi-sdk.js"></script>
<script>
  Pi.init({ version: "2.0", sandbox: true });
</script>

type PaymentData = {
  amount: number,
  memo: string,
  metadata: Object,
};

type PaymentCallbacks = {
  onReadyForServerApproval: (paymentId: string) => void,
  onReadyForServerCompletion: (paymentId: string, txid: string) => void,
  onCancel: (paymentId: string) => void,
  onError: (error: Error, payment?: PaymentDTO) => void,
};

Pi.createPayment(paymentData: PaymentData, callbacks: PaymentCallbacks): void;

type PaymentDTO = {
  // Payment data:
  identifier: string; // payment identifier
  user_uid: string; // user's app-specific ID
  amount: number; // payment amount
  memo: string; // a string provided by the developer, shown to the user
  metadata: Object; // an object provided by the developer for their own usage
  from_address: string; // sender address of the blockchain transaction
  to_address: string; // recipient address of the blockchain transaction
  direction: Direction; // direction of the payment
  created_at: string; // payment's creation timestamp
  network: AppNetwork; // a network of the payment

  // Status flags representing the current state of this payment
  status: {
    developer_approved: boolean; // Server-Side Approval
    transaction_verified: boolean; // blockchain transaction verified
    developer_completed: boolean; // server-Side Completion
    cancelled: boolean; // cancelled by the developer or by Pi Network
    user_cancelled: boolean; // cancelled by the user
  };

  // Blockchain transaction data:
  transaction: null | {
    // This is null if no transaction has been made yet
    txid: string; // id of the blockchain transaction
    verified: boolean; // true if the transaction matches the payment, false otherwise
    _link: string; // a link to the operation on the Blockchain API
  };
};

type Scope = "username" | "payments" | "wallet_address";

type NativeFeature = "inline_media" | "request_permission" | "ad_network";

Pi.nativeFeaturesList(): Promise<Array<NativeFeature>>;

Pi.openShareDialog(title: string, message: string): void;

const authRes = await window.Pi.authenticate(scopes, onIncompletePaymentFound);
const me = await axios.get('https://api.minepi.com/v2/me', {headers: {'Authorization': `Bearer ${accessToken}}});
Use the Pi SDK function to initiate the payment
A callback function that gets called automatically by the Pi SDK (letting your App Server know that it needs to make an approve API request)
An API request from your App Server to the Pi Server to approve the payment (letting the Pi Server know that you are aware of this payment)
The Pi browser shows the payment detail page to a user, and we are waiting until the user signs the transaction
A callback function that gets called automatically by the Pi SDK (letting your App Server know that it needs to make an complete API request)
An API request from your App Server to the Pi Server to complete the payment (letting the Pi Server know that you completed this payment)
Enable backend metadata support to process and validate Pi Network transactions for in-game tokens (PUBG Mobile UC, MLBB Diamonds).

Requirements:
- Metadata Type: Backend
- Store and validate transaction metadata: userId, selected game, UID, email, country, item, Pi value, transactionId.
- Authenticate requests using PI_API_KEY.
- Securely store metadata in backend database.
- Return JSON confirmation upon successful validation.
make proper backend url for it.

Real-Time Email Notifications:

Instant email confirmations sent immediately upon purchase
Comprehensive purchase details including game IDs and timestamps
Toast notifications confirming email delivery
Proper error handling for email service issues

create a comprehensive purchase confirmation flow that shows package details, allows users to verify and edit their game IDs, and includes Pi wallet passphrase or biometric authentication for secure transactions.

implement a comprehensive purchase confirmation system with the following features:

Purchase Flow:

Package Details Page - Shows exactly what they're buying, how much they're spending in both USD and Pi, with a complete price breakdown
Game ID Verification - Displays their stored game IDs (PUBG UID or MLBB User ID + Zone ID) with an edit option to ensure accuracy
Secure Payment - Two authentication methods: Pi wallet passphrase or biometric (fingerprint/face ID)
Key Features:

Two-step confirmation process for security
Real-time price calculations in Pi currency
Game account verification with editing capability
Important security warnings about ID accuracy
Support for both PUBG Mobile and Mobile Legends
Biometric authentication when supported by device
Secure passphrase entry with show/hide toggle
Processing states with loading indicators


about us (https://b4u-esports.vercel.app/about-us)  our history (https://b4u-esports.vercel.app/our-history) Link List: Render the following links in order as per the reference:
Dashboard (https://b4u-esports.vercel.app/dashboard)
Privacy Policy (https://b4u-esports.vercel.app/Privacy-Policy )
Terms of Service (https://b4u-esports.vercel.app/Terms-of-Service )
Refund Policy (https://b4u-esports.vercel.app/Refund-Policy )
Data Protection (https://b4u-esports.vercel.app/Data-Protection )
User Agreement (https://b4u-esports.vercel.app/User-Agreement )

 F. Footer & Legal Pages:

Footer must include:

Support: Email: info@b4uesports.com, Phone: +97517875099
all the above should be explaine in detailed when users click on the subheading with open and with detailed explaination. it should be in center alinement.
Follow Us: Social media icons with links.

 when users logged in through pi browser their username is not fetching instead showing random username which it should not happen .
I want to integrate Pi Network authentication and payment system into my web application using Pi SDK v2.0. Please provide a complete technical guide (no code, only explanation) covering both Testnet (sandbox: true) and Mainnet (sandbox: false).
