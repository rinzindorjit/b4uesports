{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        gaming: {\n          blue: \"var(--gaming-blue)\",\n          purple: \"var(--gaming-purple)\",\n          green: \"var(--gaming-green)\",\n          gold: \"var(--gaming-gold)\",\n          red: \"var(--gaming-red)\",\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-20px)' },\n        },\n        glow: {\n          '0%': { boxShadow: '0 0 20px rgba(59, 130, 246, 0.4)' },\n          '100%': { boxShadow: '0 0 30px rgba(59, 130, 246, 0.8)' },\n        },\n        slideIn: {\n          '0%': { transform: 'translateX(-100%)', opacity: '0' },\n          '100%': { transform: 'translateX(0)', opacity: '1' },\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        'float': 'float 6s ease-in-out infinite',\n        'glow': 'glow 2s ease-in-out infinite alternate',\n        'slideIn': 'slideIn 0.5s ease-out',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3599},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { piNetworkService } from \"./services/pi-network\";\nimport { pricingService } from \"./services/pricing\";\nimport { sendPurchaseConfirmationEmail } from \"./services/email\";\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { insertUserSchema, insertPackageSchema, insertTransactionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET || 'fallback-secret';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Middleware for admin authentication\n  const authenticateAdmin = async (req: any, res: any, next: any) => {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      const admin = await storage.getAdminByUsername(decoded.username);\n      if (!admin || !admin.isActive) {\n        return res.status(401).json({ message: 'Invalid admin token' });\n      }\n      req.admin = admin;\n      next();\n    } catch (error) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n  };\n\n  // Pi Network Authentication\n  app.post('/api/auth/pi', async (req, res) => {\n    try {\n      const { accessToken } = req.body;\n      if (!accessToken) {\n        return res.status(400).json({ message: 'Access token required' });\n      }\n\n      const piUser = await piNetworkService.verifyAccessToken(accessToken);\n      if (!piUser) {\n        return res.status(401).json({ message: 'Invalid Pi Network token' });\n      }\n\n      // Check if user exists, if not create new user\n      let user = await storage.getUserByPiUID(piUser.uid);\n      if (!user) {\n        // Create minimal user profile - they'll complete it later\n        const newUser = {\n          piUID: piUser.uid,\n          username: piUser.username,\n          email: '',\n          phone: '',\n          country: 'Bhutan',\n          language: 'en',\n          walletAddress: '', // Will be updated when they make their first transaction\n        };\n        user = await storage.createUser(newUser);\n      }\n\n      // Generate JWT token for session\n      const token = jwt.sign({ userId: user.id, piUID: user.piUID }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          phone: user.phone,\n          country: user.country,\n          language: user.language,\n          gameAccounts: user.gameAccounts,\n          walletAddress: user.walletAddress,\n        },\n        token,\n      });\n    } catch (error) {\n      console.error('Pi authentication error:', error);\n      res.status(500).json({ message: 'Authentication failed' });\n    }\n  });\n\n  // Admin Authentication\n  app.post('/api/admin/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      if (!username || !password) {\n        return res.status(400).json({ message: 'Username and password required' });\n      }\n\n      const admin = await storage.getAdminByUsername(username);\n      if (!admin || !admin.isActive) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, admin.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      await storage.updateAdminLastLogin(admin.id);\n\n      const token = jwt.sign({ adminId: admin.id, username: admin.username }, JWT_SECRET, { expiresIn: '8h' });\n\n      res.json({\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          role: admin.role,\n        },\n        token,\n      });\n    } catch (error) {\n      console.error('Admin login error:', error);\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Get current Pi price\n  app.get('/api/pi-price', async (req, res) => {\n    try {\n      const price = await pricingService.getCurrentPiPrice();\n      const lastPrice = pricingService.getLastPrice();\n      \n      res.json({\n        price,\n        lastUpdated: lastPrice?.lastUpdated || new Date(),\n      });\n    } catch (error) {\n      console.error('Pi price fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch Pi price' });\n    }\n  });\n\n  // Get packages with Pi pricing\n  app.get('/api/packages', async (req, res) => {\n    try {\n      const packages = await storage.getActivePackages();\n      const currentPiPrice = await pricingService.getCurrentPiPrice();\n\n      const packagesWithPiPricing = packages.map(pkg => ({\n        ...pkg,\n        piPrice: pricingService.calculatePiAmount(parseFloat(pkg.usdtValue)),\n        currentPiPrice,\n      }));\n\n      res.json(packagesWithPiPricing);\n    } catch (error) {\n      console.error('Packages fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch packages' });\n    }\n  });\n\n  // User profile update\n  app.put('/api/profile', async (req, res) => {\n    try {\n      const token = req.headers.authorization?.replace('Bearer ', '');\n      if (!token) {\n        return res.status(401).json({ message: 'No token provided' });\n      }\n\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      const userId = decoded.userId;\n\n      const updateData = req.body;\n      \n      // Validate required fields\n      if (updateData.email && !updateData.email.endsWith('@gmail.com')) {\n        return res.status(400).json({ message: 'Email must be a Gmail address' });\n      }\n\n      const updatedUser = await storage.updateUser(userId, updateData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Profile update error:', error);\n      res.status(500).json({ message: 'Profile update failed' });\n    }\n  });\n\n  // Payment approval endpoint\n  app.post('/api/payment/approve', async (req, res) => {\n    try {\n      const { paymentId } = req.body;\n      if (!paymentId) {\n        return res.status(400).json({ message: 'Payment ID required' });\n      }\n\n      // Get payment details from Pi Network\n      const payment = await piNetworkService.getPayment(paymentId);\n      if (!payment) {\n        return res.status(404).json({ message: 'Payment not found' });\n      }\n\n      // Validate payment metadata\n      if (!payment.metadata?.type || payment.metadata.type !== 'backend') {\n        return res.status(400).json({ message: 'Invalid payment metadata' });\n      }\n\n      // Check if transaction already exists\n      let transaction = await storage.getTransactionByPaymentId(paymentId);\n      if (!transaction) {\n        // Create new transaction record\n        const currentPiPrice = await pricingService.getCurrentPiPrice();\n        const usdAmount = pricingService.calculateUsdAmount(payment.amount);\n\n        const transactionData = {\n          userId: payment.metadata.userId,\n          packageId: payment.metadata.packageId,\n          paymentId: payment.identifier,\n          piAmount: payment.amount.toString(),\n          usdAmount: usdAmount.toString(),\n          piPriceAtTime: currentPiPrice.toString(),\n          status: 'pending',\n          gameAccount: payment.metadata.gameAccount,\n          metadata: payment.metadata,\n        };\n\n        transaction = await storage.createTransaction(transactionData);\n      }\n\n      // Approve payment with Pi Network\n      const approved = await piNetworkService.approvePayment(paymentId);\n      if (!approved) {\n        await storage.updateTransaction(transaction.id, { status: 'failed' });\n        return res.status(500).json({ message: 'Payment approval failed' });\n      }\n\n      // Update transaction status\n      await storage.updateTransaction(transaction.id, { status: 'approved' });\n\n      res.json({ success: true, transactionId: transaction.id });\n    } catch (error) {\n      console.error('Payment approval error:', error);\n      res.status(500).json({ message: 'Payment approval failed' });\n    }\n  });\n\n  // Payment completion endpoint\n  app.post('/api/payment/complete', async (req, res) => {\n    try {\n      const { paymentId, txid } = req.body;\n      if (!paymentId || !txid) {\n        return res.status(400).json({ message: 'Payment ID and txid required' });\n      }\n\n      const transaction = await storage.getTransactionByPaymentId(paymentId);\n      if (!transaction) {\n        return res.status(404).json({ message: 'Transaction not found' });\n      }\n\n      // Complete payment with Pi Network\n      const completed = await piNetworkService.completePayment(paymentId, txid);\n      if (!completed) {\n        await storage.updateTransaction(transaction.id, { status: 'failed' });\n        return res.status(500).json({ message: 'Payment completion failed' });\n      }\n\n      // Update transaction with txid and completed status\n      await storage.updateTransaction(transaction.id, { \n        status: 'completed', \n        txid: txid,\n      });\n\n      // Send confirmation email\n      try {\n        const user = await storage.getUser(transaction.userId);\n        const pkg = await storage.getPackage(transaction.packageId);\n        \n        if (user && pkg && user.email) {\n          const gameAccountString = transaction.gameAccount.ign \n            ? `${transaction.gameAccount.ign} (${transaction.gameAccount.uid})`\n            : `${transaction.gameAccount.userId}:${transaction.gameAccount.zoneId}`;\n\n          const emailSent = await sendPurchaseConfirmationEmail({\n            to: user.email,\n            username: user.username,\n            packageName: pkg.name,\n            piAmount: transaction.piAmount,\n            usdAmount: transaction.usdAmount,\n            gameAccount: gameAccountString,\n            transactionId: transaction.id,\n            paymentId: paymentId,\n            isTestnet: process.env.NODE_ENV !== 'production',\n          });\n\n          await storage.updateTransaction(transaction.id, { emailSent });\n        }\n      } catch (emailError) {\n        console.error('Email sending failed:', emailError);\n        // Don't fail the transaction if email fails\n      }\n\n      res.json({ success: true, transactionId: transaction.id, txid });\n    } catch (error) {\n      console.error('Payment completion error:', error);\n      res.status(500).json({ message: 'Payment completion failed' });\n    }\n  });\n\n  // Get user transactions\n  app.get('/api/transactions', async (req, res) => {\n    try {\n      const token = req.headers.authorization?.replace('Bearer ', '');\n      if (!token) {\n        return res.status(401).json({ message: 'No token provided' });\n      }\n\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      const userId = decoded.userId;\n\n      const transactions = await storage.getUserTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error('Transactions fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch transactions' });\n    }\n  });\n\n  // Admin endpoints\n  app.get('/api/admin/analytics', authenticateAdmin, async (req, res) => {\n    try {\n      const analytics = await storage.getAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error('Analytics fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch analytics' });\n    }\n  });\n\n  app.get('/api/admin/transactions', authenticateAdmin, async (req, res) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json(transactions);\n    } catch (error) {\n      console.error('Admin transactions fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch transactions' });\n    }\n  });\n\n  app.get('/api/admin/packages', authenticateAdmin, async (req, res) => {\n    try {\n      const packages = await storage.getPackages();\n      res.json(packages);\n    } catch (error) {\n      console.error('Admin packages fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch packages' });\n    }\n  });\n\n  app.post('/api/admin/packages', authenticateAdmin, async (req, res) => {\n    try {\n      const packageData = insertPackageSchema.parse(req.body);\n      const newPackage = await storage.createPackage(packageData);\n      res.json(newPackage);\n    } catch (error) {\n      console.error('Package creation error:', error);\n      res.status(500).json({ message: 'Failed to create package' });\n    }\n  });\n\n  app.put('/api/admin/packages/:id', authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const updatedPackage = await storage.updatePackage(id, updateData);\n      \n      if (!updatedPackage) {\n        return res.status(404).json({ message: 'Package not found' });\n      }\n      \n      res.json(updatedPackage);\n    } catch (error) {\n      console.error('Package update error:', error);\n      res.status(500).json({ message: 'Failed to update package' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13242},"server/storage.ts":{"content":"import { \n  users, \n  packages, \n  transactions, \n  admins, \n  piPriceHistory,\n  type User, \n  type InsertUser,\n  type Package,\n  type InsertPackage,\n  type Transaction,\n  type InsertTransaction,\n  type Admin,\n  type InsertAdmin,\n  type PiPriceHistory\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sum, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPiUID(piUID: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User | undefined>;\n  \n  // Packages\n  getPackages(): Promise<Package[]>;\n  getActivePackages(): Promise<Package[]>;\n  getPackage(id: string): Promise<Package | undefined>;\n  createPackage(pkg: InsertPackage): Promise<Package>;\n  updatePackage(id: string, pkg: Partial<Package>): Promise<Package | undefined>;\n  \n  // Transactions\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  getTransactionByPaymentId(paymentId: string): Promise<Transaction | undefined>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, transaction: Partial<Transaction>): Promise<Transaction | undefined>;\n  getAllTransactions(): Promise<(Transaction & { user: User; package: Package })[]>;\n  \n  // Admins\n  getAdminByUsername(username: string): Promise<Admin | undefined>;\n  createAdmin(admin: InsertAdmin): Promise<Admin>;\n  updateAdminLastLogin(id: string): Promise<void>;\n  \n  // Pi Price History\n  savePiPrice(price: number): Promise<PiPriceHistory>;\n  getLatestPiPrice(): Promise<PiPriceHistory | undefined>;\n  \n  // Analytics\n  getAnalytics(): Promise<{\n    totalUsers: number;\n    totalTransactions: number;\n    totalRevenue: number;\n    successRate: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByPiUID(piUID: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.piUID, piUID));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values([insertUser]).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getPackages(): Promise<Package[]> {\n    return await db.select().from(packages).orderBy(packages.game, packages.usdtValue);\n  }\n\n  async getActivePackages(): Promise<Package[]> {\n    return await db\n      .select()\n      .from(packages)\n      .where(eq(packages.isActive, true))\n      .orderBy(packages.game, packages.usdtValue);\n  }\n\n  async getPackage(id: string): Promise<Package | undefined> {\n    const [pkg] = await db.select().from(packages).where(eq(packages.id, id));\n    return pkg || undefined;\n  }\n\n  async createPackage(insertPackage: InsertPackage): Promise<Package> {\n    const [pkg] = await db.insert(packages).values(insertPackage).returning();\n    return pkg;\n  }\n\n  async updatePackage(id: string, packageData: Partial<Package>): Promise<Package | undefined> {\n    const [pkg] = await db\n      .update(packages)\n      .set({ ...packageData, updatedAt: new Date() })\n      .where(eq(packages.id, id))\n      .returning();\n    return pkg || undefined;\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async getTransactionByPaymentId(paymentId: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.paymentId, paymentId));\n    return transaction || undefined;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db.insert(transactions).values([insertTransaction]).returning();\n    return transaction;\n  }\n\n  async updateTransaction(id: string, transactionData: Partial<Transaction>): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .update(transactions)\n      .set({ ...transactionData, updatedAt: new Date() })\n      .where(eq(transactions.id, id))\n      .returning();\n    return transaction || undefined;\n  }\n\n  async getAllTransactions(): Promise<(Transaction & { user: User; package: Package })[]> {\n    return await db\n      .select({\n        id: transactions.id,\n        userId: transactions.userId,\n        packageId: transactions.packageId,\n        paymentId: transactions.paymentId,\n        txid: transactions.txid,\n        piAmount: transactions.piAmount,\n        usdAmount: transactions.usdAmount,\n        piPriceAtTime: transactions.piPriceAtTime,\n        status: transactions.status,\n        gameAccount: transactions.gameAccount,\n        metadata: transactions.metadata,\n        emailSent: transactions.emailSent,\n        createdAt: transactions.createdAt,\n        updatedAt: transactions.updatedAt,\n        user: users,\n        package: packages,\n      })\n      .from(transactions)\n      .leftJoin(users, eq(transactions.userId, users.id))\n      .leftJoin(packages, eq(transactions.packageId, packages.id))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async getAdminByUsername(username: string): Promise<Admin | undefined> {\n    const [admin] = await db.select().from(admins).where(eq(admins.username, username));\n    return admin || undefined;\n  }\n\n  async createAdmin(insertAdmin: InsertAdmin): Promise<Admin> {\n    const [admin] = await db.insert(admins).values(insertAdmin).returning();\n    return admin;\n  }\n\n  async updateAdminLastLogin(id: string): Promise<void> {\n    await db\n      .update(admins)\n      .set({ lastLogin: new Date() })\n      .where(eq(admins.id, id));\n  }\n\n  async savePiPrice(price: number): Promise<PiPriceHistory> {\n    const [priceRecord] = await db\n      .insert(piPriceHistory)\n      .values({ price: price.toString() })\n      .returning();\n    return priceRecord;\n  }\n\n  async getLatestPiPrice(): Promise<PiPriceHistory | undefined> {\n    const [priceRecord] = await db\n      .select()\n      .from(piPriceHistory)\n      .orderBy(desc(piPriceHistory.timestamp))\n      .limit(1);\n    return priceRecord || undefined;\n  }\n\n  async getAnalytics(): Promise<{\n    totalUsers: number;\n    totalTransactions: number;\n    totalRevenue: number;\n    successRate: number;\n  }> {\n    const [userCount] = await db.select({ count: count() }).from(users);\n    const [transactionCount] = await db.select({ count: count() }).from(transactions);\n    const [revenue] = await db\n      .select({ total: sum(transactions.piAmount) })\n      .from(transactions)\n      .where(eq(transactions.status, \"completed\"));\n    \n    const [completedCount] = await db\n      .select({ count: count() })\n      .from(transactions)\n      .where(eq(transactions.status, \"completed\"));\n\n    const successRate = transactionCount.count > 0 \n      ? (completedCount.count / transactionCount.count) * 100 \n      : 0;\n\n    return {\n      totalUsers: userCount.count,\n      totalTransactions: transactionCount.count,\n      totalRevenue: parseFloat(revenue.total || \"0\"),\n      successRate: Math.round(successRate * 100) / 100,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7942},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  piUID: text(\"pi_uid\").notNull().unique(),\n  username: text(\"username\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  country: text(\"country\").notNull().default(\"Bhutan\"),\n  language: text(\"language\").notNull().default(\"en\"),\n  walletAddress: text(\"wallet_address\").notNull(),\n  gameAccounts: jsonb(\"game_accounts\").$type<{\n    pubg?: { ign: string; uid: string };\n    mlbb?: { userId: string; zoneId: string };\n  }>(),\n  referralCode: text(\"referral_code\"),\n  passphrase: text(\"passphrase\"), // hashed passphrase for payment confirmation\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const packages = pgTable(\"packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  game: text(\"game\").notNull(), // \"PUBG\" or \"MLBB\"\n  name: text(\"name\").notNull(), // e.g., \"660 UC\", \"571 Diamonds\"\n  inGameAmount: integer(\"in_game_amount\").notNull(),\n  usdtValue: decimal(\"usdt_value\", { precision: 10, scale: 4 }).notNull(),\n  image: text(\"image\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id),\n  paymentId: text(\"payment_id\").notNull().unique(), // Pi Network payment ID\n  txid: text(\"txid\"), // blockchain transaction ID\n  piAmount: decimal(\"pi_amount\", { precision: 18, scale: 8 }).notNull(),\n  usdAmount: decimal(\"usd_amount\", { precision: 10, scale: 4 }).notNull(),\n  piPriceAtTime: decimal(\"pi_price_at_time\", { precision: 10, scale: 4 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, completed, failed, cancelled\n  gameAccount: jsonb(\"game_account\").$type<{\n    ign?: string;\n    uid?: string;\n    userId?: string;\n    zoneId?: string;\n  }>().notNull(),\n  metadata: jsonb(\"metadata\").$type<Record<string, any>>(),\n  emailSent: boolean(\"email_sent\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const admins = pgTable(\"admins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(), // hashed password\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const piPriceHistory = pgTable(\"pi_price_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  price: decimal(\"price\", { precision: 10, scale: 4 }).notNull(),\n  source: text(\"source\").notNull().default(\"coingecko\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  transactions: many(transactions),\n}));\n\nexport const packagesRelations = relations(packages, ({ many }) => ({\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n  package: one(packages, {\n    fields: [transactions.packageId],\n    references: [packages.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPackageSchema = createInsertSchema(packages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminSchema = createInsertSchema(admins).omit({\n  id: true,\n  createdAt: true,\n  lastLogin: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Package = typeof packages.$inferSelect;\nexport type InsertPackage = z.infer<typeof insertPackageSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Admin = typeof admins.$inferSelect;\nexport type InsertAdmin = z.infer<typeof insertAdminSchema>;\nexport type PiPriceHistory = typeof piPriceHistory.$inferSelect;\n","size_bytes":5080},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { PiNetworkProvider } from \"./hooks/use-pi-network\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AdminPanel from \"@/pages/admin\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsOfService from \"@/pages/terms-of-service\";\nimport RefundPolicy from \"@/pages/refund-policy\";\nimport DataProtection from \"@/pages/data-protection\";\nimport UserAgreement from \"@/pages/user-agreement\";\nimport AboutUs from \"@/pages/about-us\";\nimport OurHistory from \"@/pages/our-history\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/admin\" component={AdminPanel} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/terms-of-service\" component={TermsOfService} />\n      <Route path=\"/refund-policy\" component={RefundPolicy} />\n      <Route path=\"/data-protection\" component={DataProtection} />\n      <Route path=\"/user-agreement\" component={UserAgreement} />\n      <Route path=\"/about-us\" component={AboutUs} />\n      <Route path=\"/our-history\" component={OurHistory} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <PiNetworkProvider>\n          <div className=\"dark min-h-screen bg-background text-foreground\">\n            <Toaster />\n            <Router />\n          </div>\n        </PiNetworkProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1907},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(262, 83%, 70%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(262, 83%, 70%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --radius: 0.75rem;\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-mono: JetBrains Mono, monospace;\n  \n  /* Gaming theme colors */\n  --gaming-blue: hsl(217, 91%, 60%);\n  --gaming-purple: hsl(262, 83%, 70%);\n  --gaming-green: hsl(142, 76%, 36%);\n  --gaming-gold: hsl(45, 93%, 58%);\n  --gaming-red: hsl(0, 84%, 60%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(262, 83%, 70%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(262, 83%, 70%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .font-mono {\n    font-family: var(--font-mono);\n  }\n}\n\n@layer components {\n  .particles {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  .particle {\n    position: absolute;\n    width: 3px;\n    height: 3px;\n    background: rgba(59, 130, 246, 0.6);\n    border-radius: 50%;\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .gradient-border {\n    background: linear-gradient(45deg, var(--gaming-blue), var(--gaming-purple));\n    padding: 2px;\n    border-radius: 12px;\n  }\n\n  .gradient-border-content {\n    background: var(--card);\n    border-radius: 10px;\n  }\n\n  .game-card {\n    transition: all 0.3s ease;\n    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));\n    backdrop-filter: blur(10px);\n  }\n\n  .game-card:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.3);\n  }\n\n  .testnet-badge {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .pi-price-ticker {\n    background: linear-gradient(90deg, var(--gaming-green), hsl(158, 64%, 52%));\n    animation: glow 3s ease-in-out infinite alternate;\n  }\n\n  .social-icon {\n    transition: all 0.3s ease;\n  }\n\n  .social-icon:hover {\n    transform: translateY(-2px);\n  }\n}\n\n@layer utilities {\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n  }\n\n  @keyframes glow {\n    0% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.4); }\n    100% { box-shadow: 0 0 30px rgba(59, 130, 246, 0.8); }\n  }\n\n  @keyframes slideIn {\n    0% { transform: translateX(-100%); opacity: 0; }\n    100% { transform: translateX(0); opacity: 1; }\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-slideIn {\n    animation: slideIn 0.5s ease-out;\n  }\n}\n","size_bytes":4005},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/email.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set - email notifications will be disabled\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface PurchaseEmailParams {\n  to: string;\n  username: string;\n  packageName: string;\n  piAmount: string;\n  usdAmount: string;\n  gameAccount: string;\n  transactionId: string;\n  paymentId: string;\n  isTestnet: boolean;\n}\n\nexport async function sendPurchaseConfirmationEmail(params: PurchaseEmailParams): Promise<boolean> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.log(\"Email notification skipped - SendGrid not configured\");\n    return false;\n  }\n\n  const testnetWarning = params.isTestnet \n    ? `<div style=\"background: #FEF3C7; border: 1px solid #F59E0B; padding: 16px; border-radius: 8px; margin: 20px 0;\">\n         <p style=\"color: #92400E; margin: 0; font-weight: bold;\">\n           🚧 TESTNET TRANSACTION - No real Pi coins were deducted from your mainnet wallet.\n         </p>\n       </div>`\n    : '';\n\n  const emailHTML = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Purchase Confirmation - B4U Esports</title>\n    </head>\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n      <div style=\"background: linear-gradient(135deg, #1e3a8a, #7c3aed); padding: 30px; border-radius: 12px; text-align: center; margin-bottom: 30px;\">\n        <img src=\"https://b4uesports.com/wp-content/uploads/2025/04/cropped-Black_and_Blue_Simple_Creative_Illustrative_Dragons_E-Sport_Logo_20240720_103229_0000-removebg-preview.png\" alt=\"B4U Esports\" style=\"height: 60px; margin-bottom: 20px;\">\n        <h1 style=\"color: white; margin: 0; font-size: 28px;\">Purchase Confirmed!</h1>\n        <p style=\"color: #e5e7eb; margin: 10px 0 0 0;\">Your gaming currency has been processed</p>\n      </div>\n\n      ${testnetWarning}\n\n      <div style=\"background: #f8fafc; padding: 25px; border-radius: 10px; margin-bottom: 25px;\">\n        <h2 style=\"color: #1f2937; margin-top: 0;\">Transaction Details</h2>\n        \n        <table style=\"width: 100%; border-collapse: collapse;\">\n          <tr>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\"><strong>Customer:</strong></td>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\">${params.username}</td>\n          </tr>\n          <tr>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\"><strong>Package:</strong></td>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\">${params.packageName}</td>\n          </tr>\n          <tr>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\"><strong>Game Account:</strong></td>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb; font-family: monospace;\">${params.gameAccount}</td>\n          </tr>\n          <tr>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\"><strong>Amount Paid:</strong></td>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb; color: #059669; font-weight: bold;\">${params.piAmount} π (≈ $${params.usdAmount})</td>\n          </tr>\n          <tr>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb;\"><strong>Transaction ID:</strong></td>\n            <td style=\"padding: 12px 0; border-bottom: 1px solid #e5e7eb; font-family: monospace; font-size: 12px;\">${params.transactionId}</td>\n          </tr>\n          <tr>\n            <td style=\"padding: 12px 0;\"><strong>Payment ID:</strong></td>\n            <td style=\"padding: 12px 0; font-family: monospace; font-size: 12px;\">${params.paymentId}</td>\n          </tr>\n        </table>\n      </div>\n\n      <div style=\"background: #ecfdf5; border: 1px solid #10b981; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <p style=\"color: #065f46; margin: 0; font-weight: bold;\">\n          ✅ Your gaming currency will be delivered to your account within 5-10 minutes.\n        </p>\n      </div>\n\n      <div style=\"text-align: center; margin-top: 30px;\">\n        <p style=\"color: #6b7280;\">Need help? Contact our support team:</p>\n        <p style=\"margin: 10px 0;\">\n          <a href=\"mailto:info@b4uesports.com\" style=\"color: #3b82f6; text-decoration: none;\">info@b4uesports.com</a> | \n          <a href=\"tel:+97517875099\" style=\"color: #3b82f6; text-decoration: none;\">+975 17875099</a>\n        </p>\n        \n        <div style=\"margin: 20px 0;\">\n          <a href=\"https://www.facebook.com/b4uesports\" style=\"margin: 0 10px; color: #3b82f6; text-decoration: none;\">Facebook</a>\n          <a href=\"https://youtube.com/@b4uesports\" style=\"margin: 0 10px; color: #3b82f6; text-decoration: none;\">YouTube</a>\n          <a href=\"https://www.instagram.com/b4uesports\" style=\"margin: 0 10px; color: #3b82f6; text-decoration: none;\">Instagram</a>\n        </div>\n      </div>\n\n      <div style=\"text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 14px;\">\n        <p>© 2025 B4U Esports. All Rights Reserved.</p>\n        <p style=\"margin: 5px 0;\">Powered by <img src=\"https://b4uesports.com/wp-content/uploads/2025/04/PI.jpg\" alt=\"Pi Network\" style=\"height: 16px; vertical-align: middle; border-radius: 50%;\"> Pi Network</p>\n      </div>\n    </body>\n    </html>\n  `;\n\n  try {\n    await mailService.send({\n      to: params.to,\n      from: process.env.SENDGRID_FROM_EMAIL || 'noreply@b4uesports.com',\n      subject: `Purchase Confirmation - ${params.packageName} - B4U Esports`,\n      html: emailHTML,\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n","size_bytes":5876},"server/services/pi-network.ts":{"content":"import axios from 'axios';\n\nconst PI_API_BASE = 'https://api.minepi.com';\nconst SERVER_API_KEY = process.env.PI_SERVER_API_KEY;\n\nif (!SERVER_API_KEY) {\n  throw new Error(\"PI_SERVER_API_KEY environment variable must be set\");\n}\n\nexport interface PiUser {\n  uid: string;\n  username: string;\n  roles: string[];\n}\n\nexport interface PaymentData {\n  amount: number;\n  memo: string;\n  metadata: {\n    type: 'backend';\n    userId: string;\n    packageId: string;\n    gameAccount: Record<string, string>;\n    [key: string]: any;\n  };\n}\n\nexport interface PaymentDTO {\n  identifier: string;\n  user_uid: string;\n  amount: number;\n  memo: string;\n  metadata: Record<string, any>;\n  from_address: string;\n  to_address: string;\n  direction: 'user_to_app' | 'app_to_user';\n  created_at: string;\n  network: 'Pi Testnet' | 'Pi Network';\n  status: {\n    developer_approved: boolean;\n    transaction_verified: boolean;\n    developer_completed: boolean;\n    cancelled: boolean;\n    user_cancelled: boolean;\n  };\n  transaction: null | {\n    txid: string;\n    verified: boolean;\n    _link: string;\n  };\n}\n\nexport class PiNetworkService {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = SERVER_API_KEY!;\n  }\n\n  async verifyAccessToken(accessToken: string): Promise<PiUser | null> {\n    try {\n      const response = await axios.get(`${PI_API_BASE}/v2/me`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Pi Network token verification failed:', error);\n      return null;\n    }\n  }\n\n  async approvePayment(paymentId: string): Promise<boolean> {\n    try {\n      await axios.post(\n        `${PI_API_BASE}/v2/payments/${paymentId}/approve`,\n        {},\n        {\n          headers: {\n            'Authorization': `Key ${this.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return true;\n    } catch (error) {\n      console.error('Payment approval failed:', error);\n      return false;\n    }\n  }\n\n  async completePayment(paymentId: string, txid: string): Promise<boolean> {\n    try {\n      await axios.post(\n        `${PI_API_BASE}/v2/payments/${paymentId}/complete`,\n        { txid },\n        {\n          headers: {\n            'Authorization': `Key ${this.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return true;\n    } catch (error) {\n      console.error('Payment completion failed:', error);\n      return false;\n    }\n  }\n\n  async getPayment(paymentId: string): Promise<PaymentDTO | null> {\n    try {\n      const response = await axios.get(`${PI_API_BASE}/v2/payments/${paymentId}`, {\n        headers: {\n          'Authorization': `Key ${this.apiKey}`,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Get payment failed:', error);\n      return null;\n    }\n  }\n\n  async cancelPayment(paymentId: string): Promise<boolean> {\n    try {\n      await axios.post(\n        `${PI_API_BASE}/v2/payments/${paymentId}/cancel`,\n        {},\n        {\n          headers: {\n            'Authorization': `Key ${this.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return true;\n    } catch (error) {\n      console.error('Payment cancellation failed:', error);\n      return false;\n    }\n  }\n}\n\nexport const piNetworkService = new PiNetworkService();\n","size_bytes":3425},"server/services/pricing.ts":{"content":"import axios from 'axios';\nimport { storage } from '../storage';\n\nconst COINGECKO_API_KEY = process.env.COINGECKO_API_KEY || 'CG-z4MZkBd78fn7PgPhPYcKq1r4';\n\nexport interface PiPriceData {\n  price: number;\n  lastUpdated: Date;\n}\n\nexport class PricingService {\n  private lastPrice: PiPriceData | null = null;\n  private updateInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.startPriceUpdates();\n  }\n\n  async getCurrentPiPrice(): Promise<number> {\n    if (this.lastPrice && (Date.now() - this.lastPrice.lastUpdated.getTime()) < 60000) {\n      return this.lastPrice.price;\n    }\n\n    try {\n      const response = await axios.get(\n        `https://api.coingecko.com/api/v3/simple/price?ids=pi-network&vs_currencies=usd&x_cg_demo_api_key=${COINGECKO_API_KEY}`\n      );\n\n      const price = response.data['pi-network']?.usd || 0.958; // fallback price\n      \n      this.lastPrice = {\n        price,\n        lastUpdated: new Date(),\n      };\n\n      // Save to database\n      await storage.savePiPrice(price);\n\n      return price;\n    } catch (error) {\n      console.error('Failed to fetch Pi price from CoinGecko:', error);\n      \n      // Try to get latest price from database\n      const latestPrice = await storage.getLatestPiPrice();\n      if (latestPrice) {\n        return parseFloat(latestPrice.price);\n      }\n\n      // Fallback to default price\n      return 0.958;\n    }\n  }\n\n  calculatePiAmount(usdtValue: number): number {\n    const piPrice = this.lastPrice?.price || 0.958;\n    return parseFloat((usdtValue / piPrice).toFixed(8));\n  }\n\n  calculateUsdAmount(piAmount: number): number {\n    const piPrice = this.lastPrice?.price || 0.958;\n    return parseFloat((piAmount * piPrice).toFixed(4));\n  }\n\n  startPriceUpdates(): void {\n    // Initial price fetch\n    this.getCurrentPiPrice();\n\n    // Update price every 60 seconds\n    this.updateInterval = setInterval(async () => {\n      await this.getCurrentPiPrice();\n    }, 60000);\n  }\n\n  stopPriceUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n  }\n\n  getLastPrice(): PiPriceData | null {\n    return this.lastPrice;\n  }\n}\n\nexport const pricingService = new PricingService();\n\n// Cleanup on process exit\nprocess.on('SIGINT', () => {\n  pricingService.stopPriceUpdates();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  pricingService.stopPriceUpdates();\n  process.exit(0);\n});\n","size_bytes":2435},"client/src/components/admin-login-modal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AdminLoginModalProps {\n  onLogin: (token: string) => void;\n}\n\nexport default function AdminLoginModal({ onLogin }: AdminLoginModalProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/admin/login', credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onLogin(data.token);\n      toast({\n        title: \"Success\",\n        description: \"Successfully logged in as admin\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter both username and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-4\" data-testid=\"admin-login-modal\">\n      <CardHeader className=\"text-center\">\n        <div className=\"w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <i className=\"fas fa-shield-alt text-2xl text-white\"></i>\n        </div>\n        <CardTitle className=\"text-2xl\">Admin Login</CardTitle>\n        <p className=\"text-muted-foreground\">Enter your admin credentials to access the dashboard</p>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Enter admin username\"\n              disabled={loginMutation.isPending}\n              data-testid=\"admin-username\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter admin password\"\n              disabled={loginMutation.isPending}\n              data-testid=\"admin-password\"\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={loginMutation.isPending}\n            data-testid=\"admin-login-submit\"\n          >\n            {loginMutation.isPending ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Logging in...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                Login\n              </>\n            )}\n          </Button>\n        </form>\n\n        <div className=\"mt-6 p-4 bg-amber-500/20 border border-amber-500 rounded-lg\">\n          <p className=\"text-sm text-amber-300\">\n            <i className=\"fas fa-info-circle mr-2\"></i>\n            Admin access is restricted. Contact system administrator for credentials.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3956},"client/src/components/country-selector.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { COUNTRIES } from '@/lib/constants';\n\ninterface CountrySelectorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelect: (countryCode: string) => void;\n  selectedCountry: string;\n}\n\nexport default function CountrySelector({ isOpen, onClose, onSelect, selectedCountry }: CountrySelectorProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const filteredCountries = COUNTRIES.filter(country =>\n    country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    country.code.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleSelect = (countryCode: string) => {\n    onSelect(countryCode);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"country-selector\">\n        <DialogHeader>\n          <DialogTitle>Select Country</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <Input\n            placeholder=\"Search countries...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            data-testid=\"country-search\"\n          />\n          \n          <ScrollArea className=\"h-80\">\n            <div className=\"space-y-1\">\n              {filteredCountries.map((country) => (\n                <Button\n                  key={country.code}\n                  variant={selectedCountry === country.code ? \"default\" : \"ghost\"}\n                  className=\"w-full justify-start\"\n                  onClick={() => handleSelect(country.code)}\n                  data-testid={`country-option-${country.code}`}\n                >\n                  <span className=\"mr-3 text-lg\">{country.flag}</span>\n                  <span>{country.name}</span>\n                  {selectedCountry === country.code && (\n                    <i className=\"fas fa-check ml-auto text-primary\"></i>\n                  )}\n                </Button>\n              ))}\n            </div>\n          </ScrollArea>\n          \n          {filteredCountries.length === 0 && (\n            <div className=\"text-center text-muted-foreground py-8\" data-testid=\"no-countries\">\n              No countries found matching \"{searchTerm}\"\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2560},"client/src/components/footer.tsx":{"content":"import { Link } from 'wouter';\nimport { BRAND_LOGOS, SOCIAL_LINKS, CONTACT_INFO } from '@/lib/constants';\n\nexport default function Footer() {\n  return (\n    <footer className=\"relative z-10 bg-card border-t border-border mt-20\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"col-span-1 md:col-span-2\" data-testid=\"footer-company\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <img \n                src={BRAND_LOGOS.B4U} \n                alt=\"B4U Esports\" \n                className=\"h-12 w-auto\"\n                data-testid=\"footer-logo\"\n              />\n              <h3 className=\"text-xl font-bold\">B4U Esports</h3>\n            </div>\n            <p className=\"text-muted-foreground mb-6 max-w-md\" data-testid=\"footer-description\">\n              The premier gaming marketplace powered by Pi Network. Purchase in-game currencies with Pi coins in a secure, fast, and reliable environment.\n            </p>\n            \n            <div className=\"space-y-2\" data-testid=\"footer-contact\">\n              <p className=\"text-muted-foreground\">\n                <i className=\"fas fa-envelope mr-2\"></i>\n                <a href={`mailto:${CONTACT_INFO.EMAIL}`} className=\"hover:text-primary\" data-testid=\"contact-email\">\n                  {CONTACT_INFO.EMAIL}\n                </a>\n              </p>\n              <p className=\"text-muted-foreground\">\n                <i className=\"fas fa-phone mr-2\"></i>\n                <a href={`tel:${CONTACT_INFO.PHONE}`} className=\"hover:text-primary\" data-testid=\"contact-phone\">\n                  {CONTACT_INFO.PHONE}\n                </a>\n              </p>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div data-testid=\"footer-quick-links\">\n            <h4 className=\"text-lg font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2\">\n              <li><Link href=\"/\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-home\">Home</Link></li>\n              <li><Link href=\"/dashboard\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-dashboard\">Dashboard</Link></li>\n              <li><Link href=\"/about-us\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-about\">About Us</Link></li>\n              <li><Link href=\"/our-history\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-history\">Our History</Link></li>\n            </ul>\n          </div>\n\n          {/* Legal */}\n          <div data-testid=\"footer-legal\">\n            <h4 className=\"text-lg font-semibold mb-4\">Legal</h4>\n            <ul className=\"space-y-2\">\n              <li><Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-privacy\">Privacy Policy</Link></li>\n              <li><Link href=\"/terms-of-service\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-terms\">Terms of Service</Link></li>\n              <li><Link href=\"/refund-policy\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-refund\">Refund Policy</Link></li>\n              <li><Link href=\"/data-protection\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-data-protection\">Data Protection</Link></li>\n              <li><Link href=\"/user-agreement\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"link-user-agreement\">User Agreement</Link></li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Social Media & Copyright */}\n        <div className=\"border-t border-border pt-8 mt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-6 mb-4 md:mb-0\" data-testid=\"footer-social\">\n              <a \n                href={SOCIAL_LINKS.FACEBOOK} \n                className=\"social-icon text-muted-foreground hover:text-blue-500 transition-colors text-xl\"\n                data-testid=\"social-facebook\"\n                aria-label=\"Facebook\"\n              >\n                <i className=\"fab fa-facebook\"></i>\n              </a>\n              <a \n                href={SOCIAL_LINKS.YOUTUBE} \n                className=\"social-icon text-muted-foreground hover:text-red-500 transition-colors text-xl\"\n                data-testid=\"social-youtube\"\n                aria-label=\"YouTube\"\n              >\n                <i className=\"fab fa-youtube\"></i>\n              </a>\n              <a \n                href={SOCIAL_LINKS.TIKTOK} \n                className=\"social-icon text-muted-foreground hover:text-pink-500 transition-colors text-xl\"\n                data-testid=\"social-tiktok\"\n                aria-label=\"TikTok\"\n              >\n                <i className=\"fab fa-tiktok\"></i>\n              </a>\n              <a \n                href={SOCIAL_LINKS.INSTAGRAM} \n                className=\"social-icon text-muted-foreground hover:text-purple-500 transition-colors text-xl\"\n                data-testid=\"social-instagram\"\n                aria-label=\"Instagram\"\n              >\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a \n                href={SOCIAL_LINKS.LINKEDIN} \n                className=\"social-icon text-muted-foreground hover:text-blue-600 transition-colors text-xl\"\n                data-testid=\"social-linkedin\"\n                aria-label=\"LinkedIn\"\n              >\n                <i className=\"fab fa-linkedin\"></i>\n              </a>\n            </div>\n\n            <div className=\"text-center md:text-right\" data-testid=\"footer-copyright\">\n              <p className=\"text-muted-foreground text-sm mb-2\">© 2025 B4U Esports. All Rights Reserved.</p>\n              <div className=\"flex items-center justify-center md:justify-end space-x-2\">\n                <span className=\"text-muted-foreground text-sm\">Powered by</span>\n                <img \n                  src={BRAND_LOGOS.PI} \n                  alt=\"Pi Network\" \n                  className=\"w-6 h-6 rounded-full\"\n                  data-testid=\"pi-logo\"\n                />\n                <span className=\"text-primary text-sm font-semibold\">Pi Network</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6566},"client/src/components/navigation.tsx":{"content":"import { BRAND_LOGOS, SOCIAL_LINKS } from '@/lib/constants';\n\ninterface NavigationProps {\n  isTestnet?: boolean;\n}\n\nexport default function Navigation({ isTestnet = true }: NavigationProps) {\n  return (\n    <nav className=\"relative z-10 border-b border-border bg-card/80 backdrop-blur-lg\" data-testid=\"navigation\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\" data-testid=\"nav-brand\">\n            <img \n              src={BRAND_LOGOS.B4U} \n              alt=\"B4U Esports Logo\" \n              className=\"h-10 w-auto\"\n              data-testid=\"brand-logo\"\n            />\n            <h1 className=\"text-xl font-bold text-foreground\">B4U Esports</h1>\n          </div>\n          \n          {isTestnet && (\n            <div className=\"testnet-badge bg-amber-500 text-amber-900 px-3 py-1 rounded-full text-sm font-semibold\" data-testid=\"testnet-badge\">\n              🚧 TESTNET MODE\n            </div>\n          )}\n\n          <div className=\"hidden md:flex items-center space-x-4\" data-testid=\"social-links\">\n            <a \n              href={SOCIAL_LINKS.FACEBOOK} \n              className=\"social-icon text-muted-foreground hover:text-blue-500 transition-colors\"\n              data-testid=\"social-facebook\"\n              aria-label=\"Facebook\"\n            >\n              <i className=\"fab fa-facebook text-xl\"></i>\n            </a>\n            <a \n              href={SOCIAL_LINKS.YOUTUBE} \n              className=\"social-icon text-muted-foreground hover:text-red-500 transition-colors\"\n              data-testid=\"social-youtube\"\n              aria-label=\"YouTube\"\n            >\n              <i className=\"fab fa-youtube text-xl\"></i>\n            </a>\n            <a \n              href={SOCIAL_LINKS.TIKTOK} \n              className=\"social-icon text-muted-foreground hover:text-pink-500 transition-colors\"\n              data-testid=\"social-tiktok\"\n              aria-label=\"TikTok\"\n            >\n              <i className=\"fab fa-tiktok text-xl\"></i>\n            </a>\n            <a \n              href={SOCIAL_LINKS.INSTAGRAM} \n              className=\"social-icon text-muted-foreground hover:text-purple-500 transition-colors\"\n              data-testid=\"social-instagram\"\n              aria-label=\"Instagram\"\n            >\n              <i className=\"fab fa-instagram text-xl\"></i>\n            </a>\n            <a \n              href={SOCIAL_LINKS.LINKEDIN} \n              className=\"social-icon text-muted-foreground hover:text-blue-600 transition-colors\"\n              data-testid=\"social-linkedin\"\n              aria-label=\"LinkedIn\"\n            >\n              <i className=\"fab fa-linkedin text-xl\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2835},"client/src/components/package-card.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { GAME_LOGOS } from '@/lib/constants';\nimport type { Package } from '@/types/pi-network';\n\ninterface PackageCardProps {\n  package: Package;\n  onPurchase: () => void;\n  'data-testid'?: string;\n}\n\nexport default function PackageCard({ package: pkg, onPurchase, 'data-testid': testId }: PackageCardProps) {\n  const gameLogoUrl = pkg.game === 'PUBG' ? GAME_LOGOS.PUBG : GAME_LOGOS.MLBB;\n  const gameName = pkg.game === 'PUBG' ? 'PUBG Mobile' : 'Mobile Legends';\n\n  return (\n    <Card className=\"game-card hover:transform hover:-translate-y-2 transition-all duration-300\" data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <img \n            src={gameLogoUrl} \n            alt={gameName} \n            className=\"w-12 h-12 mr-3\"\n            data-testid={`${testId}-logo`}\n          />\n          <div>\n            <h3 className=\"text-xl font-bold\" data-testid={`${testId}-name`}>\n              {pkg.name}\n            </h3>\n            <p className=\"text-muted-foreground text-sm\">\n              {pkg.game === 'PUBG' ? 'UC Package' : 'Diamonds Package'}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-between items-center mb-4\">\n          <span className=\"text-2xl font-bold text-green-400 font-mono\" data-testid={`${testId}-pi-price`}>\n            {pkg.piPrice ? `${pkg.piPrice.toFixed(1)} π` : 'Loading...'}\n          </span>\n          <span className=\"text-sm text-muted-foreground\" data-testid={`${testId}-usd-price`}>\n            ≈ ${pkg.usdtValue}\n          </span>\n        </div>\n        \n        <Button \n          onClick={onPurchase}\n          className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n          data-testid={`${testId}-buy-button`}\n        >\n          Buy Now\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1983},"client/src/components/particle-background.tsx":{"content":"interface ParticleBackgroundProps {\n  count?: number;\n}\n\nexport default function ParticleBackground({ count = 15 }: ParticleBackgroundProps) {\n  const particles = Array.from({ length: count }, (_, i) => ({\n    id: i,\n    left: `${Math.random() * 100}%`,\n    animationDelay: `${Math.random() * 6}s`,\n  }));\n\n  return (\n    <div className=\"particles\">\n      {particles.map((particle) => (\n        <div\n          key={particle.id}\n          className=\"particle\"\n          style={{\n            left: particle.left,\n            animationDelay: particle.animationDelay,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":616},"client/src/components/profile-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { usePiNetwork } from '@/hooks/use-pi-network';\nimport CountrySelector from '@/components/country-selector';\nimport { COUNTRIES, LANGUAGES, GAME_LOGOS } from '@/lib/constants';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ProfileModal({ isOpen, onClose }: ProfileModalProps) {\n  const { user, token } = usePiNetwork();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState({\n    email: '',\n    phone: '',\n    country: 'Bhutan',\n    language: 'en',\n    gameAccounts: {\n      pubg: { ign: '', uid: '' },\n      mlbb: { userId: '', zoneId: '' }\n    },\n    referralCode: ''\n  });\n\n  const [showCountrySelector, setShowCountrySelector] = useState(false);\n\n  useEffect(() => {\n    if (user && isOpen) {\n      setFormData({\n        email: user.email || '',\n        phone: user.phone || '',\n        country: user.country || 'Bhutan',\n        language: user.language || 'en',\n        gameAccounts: {\n          pubg: {\n            ign: user.gameAccounts?.pubg?.ign || '',\n            uid: user.gameAccounts?.pubg?.uid || ''\n          },\n          mlbb: {\n            userId: user.gameAccounts?.mlbb?.userId || '',\n            zoneId: user.gameAccounts?.mlbb?.zoneId || ''\n          }\n        },\n        referralCode: user.referralCode || ''\n      });\n    }\n  }, [user, isOpen]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Profile update failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/profile'] });\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate email\n    if (formData.email && !formData.email.endsWith('@gmail.com')) {\n      toast({\n        title: \"Error\",\n        description: \"Email must be a Gmail address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate required fields\n    if (!formData.email || !formData.phone) {\n      toast({\n        title: \"Error\",\n        description: \"Email and phone number are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleGameAccountChange = (game: 'pubg' | 'mlbb', field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      gameAccounts: {\n        ...prev.gameAccounts,\n        [game]: {\n          ...prev.gameAccounts[game],\n          [field]: value\n        }\n      }\n    }));\n  };\n\n  const selectedCountry = COUNTRIES.find(c => c.code === formData.country);\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"profile-modal\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">Edit Profile</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Personal Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Personal Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Pi Username</Label>\n                    <Input \n                      value={user?.username || ''} \n                      readOnly \n                      className=\"bg-muted cursor-not-allowed\"\n                      data-testid=\"pi-username\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Pi Wallet Address</Label>\n                    <Input \n                      value={user?.walletAddress ? `${user.walletAddress.slice(0, 6)}...${user.walletAddress.slice(-4)}` : 'Not set'} \n                      readOnly \n                      className=\"bg-muted cursor-not-allowed font-mono text-sm\"\n                      data-testid=\"pi-wallet\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Email *</Label>\n                    <Input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      placeholder=\"your-email@gmail.com\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Contact Number *</Label>\n                    <Input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => {\n                        // Only allow numbers\n                        const value = e.target.value.replace(/\\D/g, '');\n                        handleInputChange('phone', value);\n                      }}\n                      placeholder=\"+97517875099\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Country *</Label>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={() => setShowCountrySelector(true)}\n                      data-testid=\"country-selector-button\"\n                    >\n                      {selectedCountry?.flag} {selectedCountry?.name}\n                    </Button>\n                  </div>\n                  <div>\n                    <Label>Language</Label>\n                    <Select value={formData.language} onValueChange={(value) => handleInputChange('language', value)}>\n                      <SelectTrigger data-testid=\"language-select\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {LANGUAGES.map((lang) => (\n                          <SelectItem key={lang.code} value={lang.code}>\n                            {lang.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Game Accounts */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Game Accounts</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* PUBG Mobile */}\n                <div className=\"p-4 bg-muted rounded-lg\" data-testid=\"pubg-account\">\n                  <div className=\"flex items-center mb-4\">\n                    <img src={GAME_LOGOS.PUBG} alt=\"PUBG Mobile\" className=\"w-8 h-8 mr-3\" />\n                    <h4 className=\"text-lg font-semibold\">PUBG Mobile</h4>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label>In-Game Name (IGN)</Label>\n                      <Input\n                        value={formData.gameAccounts.pubg.ign}\n                        onChange={(e) => handleGameAccountChange('pubg', 'ign', e.target.value)}\n                        placeholder=\"ProGamer2025\"\n                        data-testid=\"pubg-ign\"\n                      />\n                    </div>\n                    <div>\n                      <Label>Player UID</Label>\n                      <Input\n                        value={formData.gameAccounts.pubg.uid}\n                        onChange={(e) => {\n                          // Only allow numbers\n                          const value = e.target.value.replace(/\\D/g, '');\n                          handleGameAccountChange('pubg', 'uid', value);\n                        }}\n                        placeholder=\"5123456789\"\n                        className=\"font-mono\"\n                        data-testid=\"pubg-uid\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Mobile Legends */}\n                <div className=\"p-4 bg-muted rounded-lg\" data-testid=\"mlbb-account\">\n                  <div className=\"flex items-center mb-4\">\n                    <img src={GAME_LOGOS.MLBB} alt=\"Mobile Legends\" className=\"w-8 h-8 mr-3\" />\n                    <h4 className=\"text-lg font-semibold\">Mobile Legends: Bang Bang</h4>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label>User ID</Label>\n                      <Input\n                        value={formData.gameAccounts.mlbb.userId}\n                        onChange={(e) => {\n                          // Only allow numbers\n                          const value = e.target.value.replace(/\\D/g, '');\n                          handleGameAccountChange('mlbb', 'userId', value);\n                        }}\n                        placeholder=\"123456789\"\n                        className=\"font-mono\"\n                        data-testid=\"mlbb-user-id\"\n                      />\n                    </div>\n                    <div>\n                      <Label>Zone ID</Label>\n                      <Input\n                        value={formData.gameAccounts.mlbb.zoneId}\n                        onChange={(e) => {\n                          // Only allow numbers\n                          const value = e.target.value.replace(/\\D/g, '');\n                          handleGameAccountChange('mlbb', 'zoneId', value);\n                        }}\n                        placeholder=\"3002\"\n                        className=\"font-mono\"\n                        data-testid=\"mlbb-zone-id\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Referral Code */}\n            <div>\n              <Label>Referral Code (Optional)</Label>\n              <Input\n                value={formData.referralCode}\n                onChange={(e) => handleInputChange('referralCode', e.target.value)}\n                placeholder=\"Enter referral code\"\n                data-testid=\"referral-code\"\n              />\n            </div>\n\n            {/* Save Button */}\n            <div className=\"flex justify-end space-x-4 pt-6\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"cancel-profile-edit\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={updateProfileMutation.isPending}\n                data-testid=\"save-profile\"\n              >\n                {updateProfileMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Saving...\n                  </>\n                ) : (\n                  'Save Changes'\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Country Selector Modal */}\n      <CountrySelector\n        isOpen={showCountrySelector}\n        onClose={() => setShowCountrySelector(false)}\n        onSelect={(countryCode) => {\n          handleInputChange('country', countryCode);\n          setShowCountrySelector(false);\n        }}\n        selectedCountry={formData.country}\n      />\n    </>\n  );\n}\n","size_bytes":12983},"client/src/components/purchase-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { usePiNetwork } from '@/hooks/use-pi-network';\nimport { GAME_LOGOS } from '@/lib/constants';\nimport type { Package } from '@/types/pi-network';\nimport bcrypt from 'bcryptjs';\n\ninterface PurchaseModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  package: Package;\n}\n\nexport default function PurchaseModal({ isOpen, onClose, package: pkg }: PurchaseModalProps) {\n  const { user, createPayment } = usePiNetwork();\n  const { toast } = useToast();\n  const [step, setStep] = useState<'confirm' | 'auth'>('confirm');\n  const [passphrase, setPassphrase] = useState('');\n  const [showPassphrase, setShowPassphrase] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [editableGameAccount, setEditableGameAccount] = useState<any>({});\n\n  const gameLogoUrl = pkg.game === 'PUBG' ? GAME_LOGOS.PUBG : GAME_LOGOS.MLBB;\n  const gameName = pkg.game === 'PUBG' ? 'PUBG Mobile' : 'Mobile Legends';\n\n  useEffect(() => {\n    if (user && isOpen) {\n      if (pkg.game === 'PUBG' && user.gameAccounts?.pubg) {\n        setEditableGameAccount(user.gameAccounts.pubg);\n      } else if (pkg.game === 'MLBB' && user.gameAccounts?.mlbb) {\n        setEditableGameAccount(user.gameAccounts.mlbb);\n      } else {\n        setEditableGameAccount({});\n      }\n    }\n  }, [user, pkg.game, isOpen]);\n\n  const handleConfirmPurchase = () => {\n    // Validate game account\n    if (pkg.game === 'PUBG') {\n      if (!editableGameAccount.ign || !editableGameAccount.uid) {\n        toast({\n          title: \"Error\",\n          description: \"Please enter your PUBG IGN and UID\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else if (pkg.game === 'MLBB') {\n      if (!editableGameAccount.userId || !editableGameAccount.zoneId) {\n        toast({\n          title: \"Error\",\n          description: \"Please enter your Mobile Legends User ID and Zone ID\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setStep('auth');\n  };\n\n  const handleProcessPayment = async () => {\n    if (!passphrase) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your passphrase\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Create payment with Pi Network\n      const paymentData = {\n        amount: pkg.piPrice || 0,\n        memo: `${pkg.name} - ${gameName}`,\n        metadata: {\n          type: 'backend' as const,\n          userId: user!.id,\n          packageId: pkg.id,\n          gameAccount: editableGameAccount,\n          passphrase: await bcrypt.hash(passphrase, 10), // Hash passphrase\n        },\n      };\n\n      createPayment(paymentData, {\n        onReadyForServerApproval: (paymentId: string) => {\n          toast({\n            title: \"Payment Approved\",\n            description: `Payment ${paymentId} approved by server`,\n          });\n        },\n        onReadyForServerCompletion: (paymentId: string, txid: string) => {\n          toast({\n            title: \"Payment Completed\",\n            description: `✅ Payment confirmed! Transaction ID: ${txid}`,\n          });\n          onClose();\n          setStep('confirm');\n          setPassphrase('');\n        },\n        onCancel: (paymentId: string) => {\n          toast({\n            title: \"Payment Cancelled\",\n            description: \"❌ Payment canceled. No Pi deducted.\",\n            variant: \"destructive\",\n          });\n          setIsProcessing(false);\n        },\n        onError: (error: Error) => {\n          toast({\n            title: \"Payment Failed\",\n            description: `⚠️ Payment failed: ${error.message}. Please retry.`,\n            variant: \"destructive\",\n          });\n          setIsProcessing(false);\n        },\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Payment processing failed\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  const handleGameAccountChange = (field: string, value: string) => {\n    setEditableGameAccount((prev: any) => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const formatGameAccount = () => {\n    if (pkg.game === 'PUBG') {\n      return `${editableGameAccount.ign || 'Not set'} (${editableGameAccount.uid || 'Not set'})`;\n    } else {\n      return `${editableGameAccount.userId || 'Not set'}:${editableGameAccount.zoneId || 'Not set'}`;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"purchase-modal\">\n        {step === 'confirm' ? (\n          <>\n            <DialogHeader>\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-gamepad text-2xl text-primary-foreground\"></i>\n                </div>\n                <DialogTitle className=\"text-2xl mb-2\">Confirm Purchase</DialogTitle>\n                <p className=\"text-muted-foreground\">Review and verify your purchase details</p>\n              </div>\n            </DialogHeader>\n\n            <div className=\"space-y-4 mb-6\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center\">\n                    <img src={gameLogoUrl} alt={gameName} className=\"w-12 h-12 mr-3\" />\n                    <div>\n                      <p className=\"font-semibold\" data-testid=\"package-name\">{pkg.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{gameName}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <Label className=\"text-sm font-medium\">Game Account</Label>\n                  {pkg.game === 'PUBG' ? (\n                    <div className=\"space-y-2 mt-2\">\n                      <Input\n                        placeholder=\"In-Game Name (IGN)\"\n                        value={editableGameAccount.ign || ''}\n                        onChange={(e) => handleGameAccountChange('ign', e.target.value)}\n                        data-testid=\"purchase-pubg-ign\"\n                      />\n                      <Input\n                        placeholder=\"Player UID\"\n                        value={editableGameAccount.uid || ''}\n                        onChange={(e) => {\n                          const value = e.target.value.replace(/\\D/g, '');\n                          handleGameAccountChange('uid', value);\n                        }}\n                        className=\"font-mono\"\n                        data-testid=\"purchase-pubg-uid\"\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2 mt-2\">\n                      <Input\n                        placeholder=\"User ID\"\n                        value={editableGameAccount.userId || ''}\n                        onChange={(e) => {\n                          const value = e.target.value.replace(/\\D/g, '');\n                          handleGameAccountChange('userId', value);\n                        }}\n                        className=\"font-mono\"\n                        data-testid=\"purchase-mlbb-user-id\"\n                      />\n                      <Input\n                        placeholder=\"Zone ID\"\n                        value={editableGameAccount.zoneId || ''}\n                        onChange={(e) => {\n                          const value = e.target.value.replace(/\\D/g, '');\n                          handleGameAccountChange('zoneId', value);\n                        }}\n                        className=\"font-mono\"\n                        data-testid=\"purchase-mlbb-zone-id\"\n                      />\n                    </div>\n                  )}\n                  <p className=\"text-xs text-amber-400 mt-2\">\n                    <i className=\"fas fa-exclamation-triangle mr-1\"></i>\n                    Please verify your game IDs are correct. Incorrect IDs may result in failed delivery.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Total Cost</span>\n                    <div className=\"text-right\">\n                      <p className=\"font-mono text-green-400 text-xl font-bold\" data-testid=\"total-cost\">\n                        {pkg.piPrice?.toFixed(1)} π\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">≈ ${pkg.usdtValue}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {import.meta.env.DEV && (\n              <div className=\"bg-amber-500/20 border border-amber-500 rounded-lg p-4 mb-6\">\n                <p className=\"text-sm text-amber-300\">\n                  <i className=\"fas fa-info-circle mr-2\"></i>\n                  Testnet Mode: No real Pi will be deducted from your mainnet wallet.\n                </p>\n              </div>\n            )}\n\n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={onClose} \n                className=\"flex-1\"\n                data-testid=\"cancel-purchase\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleConfirmPurchase} \n                className=\"flex-1\"\n                data-testid=\"confirm-purchase\"\n              >\n                Continue\n              </Button>\n            </div>\n          </>\n        ) : (\n          <>\n            <DialogHeader>\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-lock text-2xl text-primary-foreground\"></i>\n                </div>\n                <DialogTitle className=\"text-2xl mb-2\">Secure Payment</DialogTitle>\n                <p className=\"text-muted-foreground\">Enter your passphrase to authorize the payment</p>\n              </div>\n            </DialogHeader>\n\n            <div className=\"space-y-4 mb-6\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-semibold\">{pkg.name}</p>\n                    <p className=\"text-2xl font-bold text-green-400 font-mono\">\n                      {pkg.piPrice?.toFixed(1)} π\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Account: {formatGameAccount()}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"space-y-2\">\n                <Label>Payment Passphrase</Label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPassphrase ? \"text\" : \"password\"}\n                    value={passphrase}\n                    onChange={(e) => setPassphrase(e.target.value)}\n                    placeholder=\"Enter your secure passphrase\"\n                    disabled={isProcessing}\n                    data-testid=\"payment-passphrase\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2\"\n                    onClick={() => setShowPassphrase(!showPassphrase)}\n                    data-testid=\"toggle-passphrase\"\n                  >\n                    <i className={`fas ${showPassphrase ? 'fa-eye-slash' : 'fa-eye'}`}></i>\n                  </Button>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  This passphrase secures your Pi Network transactions\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-500/20 border border-blue-500 rounded-lg p-4 mb-6\">\n              <p className=\"text-sm text-blue-300\">\n                <i className=\"fas fa-info-circle mr-2\"></i>\n                You are about to pay {pkg.piPrice?.toFixed(1)} π for {pkg.name}. This transaction will be processed through Pi Network.\n              </p>\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setStep('confirm')} \n                className=\"flex-1\"\n                disabled={isProcessing}\n                data-testid=\"back-to-confirm\"\n              >\n                Back\n              </Button>\n              <Button \n                onClick={handleProcessPayment} \n                className=\"flex-1\"\n                disabled={isProcessing || !passphrase}\n                data-testid=\"process-payment\"\n              >\n                {isProcessing ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-credit-card mr-2\"></i>\n                    Pay Now\n                  </>\n                )}\n              </Button>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13906},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-pi-network.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { piSDK } from '@/lib/pi-sdk';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { User, PaymentData, PaymentCallbacks } from '@/types/pi-network';\n\ninterface PiNetworkContextType {\n  isAuthenticated: boolean;\n  user: User | null;\n  isLoading: boolean;\n  authenticate: () => Promise<void>;\n  logout: () => void;\n  createPayment: (paymentData: PaymentData, callbacks: PaymentCallbacks) => void;\n  token: string | null;\n}\n\nconst PiNetworkContext = createContext<PiNetworkContextType | undefined>(undefined);\n\ninterface PiNetworkProviderProps {\n  children: ReactNode;\n}\n\nexport function PiNetworkProvider({ children }: PiNetworkProviderProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Initialize Pi SDK\n    const isProduction = import.meta.env.PROD;\n    piSDK.init(!isProduction); // sandbox mode for development\n\n    // Check for existing session\n    const savedToken = localStorage.getItem('pi_token');\n    const savedUser = localStorage.getItem('pi_user');\n    \n    if (savedToken && savedUser) {\n      setToken(savedToken);\n      setUser(JSON.parse(savedUser));\n      setIsAuthenticated(true);\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  const authenticate = async () => {\n    setIsLoading(true);\n    try {\n      const authResult = await piSDK.authenticate(['payments', 'username']);\n      if (!authResult) {\n        throw new Error('Authentication failed');\n      }\n\n      // Send access token to backend for verification\n      const response = await apiRequest('POST', '/api/auth/pi', {\n        accessToken: authResult.accessToken,\n      });\n      \n      const data = await response.json();\n      \n      setUser(data.user);\n      setToken(data.token);\n      setIsAuthenticated(true);\n      \n      // Save to localStorage\n      localStorage.setItem('pi_token', data.token);\n      localStorage.setItem('pi_user', JSON.stringify(data.user));\n      \n    } catch (error) {\n      console.error('Authentication error:', error);\n      setIsAuthenticated(false);\n      setUser(null);\n      setToken(null);\n    }\n    setIsLoading(false);\n  };\n\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('pi_token');\n    localStorage.removeItem('pi_user');\n  };\n\n  const createPayment = (paymentData: PaymentData, callbacks: PaymentCallbacks) => {\n    if (!isAuthenticated || !user) {\n      throw new Error('User not authenticated');\n    }\n\n    // Add user context to metadata\n    const enhancedPaymentData = {\n      ...paymentData,\n      metadata: {\n        ...paymentData.metadata,\n        type: 'backend' as const,\n        userId: user.id,\n      },\n    };\n\n    // Enhanced callbacks with API calls\n    const enhancedCallbacks = {\n      onReadyForServerApproval: async (paymentId: string) => {\n        try {\n          await apiRequest('POST', '/api/payment/approve', { paymentId });\n          callbacks.onReadyForServerApproval(paymentId);\n        } catch (error) {\n          console.error('Payment approval failed:', error);\n          callbacks.onError(error as Error);\n        }\n      },\n      onReadyForServerCompletion: async (paymentId: string, txid: string) => {\n        try {\n          await apiRequest('POST', '/api/payment/complete', { paymentId, txid });\n          callbacks.onReadyForServerCompletion(paymentId, txid);\n        } catch (error) {\n          console.error('Payment completion failed:', error);\n          callbacks.onError(error as Error);\n        }\n      },\n      onCancel: callbacks.onCancel,\n      onError: callbacks.onError,\n    };\n\n    piSDK.createPayment(enhancedPaymentData, enhancedCallbacks);\n  };\n\n  return (\n    <PiNetworkContext.Provider value={{\n      isAuthenticated,\n      user,\n      isLoading,\n      authenticate,\n      logout,\n      createPayment,\n      token,\n    }}>\n      {children}\n    </PiNetworkContext.Provider>\n  );\n}\n\nexport function usePiNetwork() {\n  const context = useContext(PiNetworkContext);\n  if (context === undefined) {\n    throw new Error('usePiNetwork must be used within a PiNetworkProvider');\n  }\n  return context;\n}\n","size_bytes":4363},"client/src/hooks/use-pi-price.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport type { PiPrice } from '@/types/pi-network';\n\nexport function usePiPrice() {\n  return useQuery<PiPrice>({\n    queryKey: ['/api/pi-price'],\n    refetchInterval: 60000, // Update every 60 seconds\n    staleTime: 50000, // Consider data stale after 50 seconds\n  });\n}\n","size_bytes":320},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"export const GAME_LOGOS = {\n  PUBG: \"https://cdn.midasbuy.com/images/pubgm_app-icon_512x512%281%29.e9f7efc0.png\",\n  MLBB: \"https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTT-Neggt-JpAh4eDx84JswmFwJMOa4pcfhqtcTcxtywIGC4IfB\"\n};\n\nexport const BRAND_LOGOS = {\n  B4U: \"https://b4uesports.com/wp-content/uploads/2025/04/cropped-Black_and_Blue_Simple_Creative_Illustrative_Dragons_E-Sport_Logo_20240720_103229_0000-removebg-preview.png\",\n  PI: \"https://b4uesports.com/wp-content/uploads/2025/04/PI.jpg\"\n};\n\nexport const SOCIAL_LINKS = {\n  FACEBOOK: \"https://www.facebook.com/b4uesports\",\n  YOUTUBE: \"https://youtube.com/@b4uesports\",\n  TIKTOK: \"https://www.tiktok.com/b4uesports\",\n  INSTAGRAM: \"https://www.instagram.com/b4uesports\",\n  LINKEDIN: \"https://www.linkedin.com/company/b4uesports/\"\n};\n\nexport const CONTACT_INFO = {\n  EMAIL: \"info@b4uesports.com\",\n  PHONE: \"+97517875099\"\n};\n\nexport const COUNTRIES = [\n  { code: \"BT\", name: \"Bhutan\", flag: \"🇧🇹\" },\n  { code: \"IN\", name: \"India\", flag: \"🇮🇳\" },\n  { code: \"US\", name: \"United States\", flag: \"🇺🇸\" },\n  { code: \"GB\", name: \"United Kingdom\", flag: \"🇬🇧\" },\n  { code: \"CA\", name: \"Canada\", flag: \"🇨🇦\" },\n  { code: \"AU\", name: \"Australia\", flag: \"🇦🇺\" },\n  { code: \"DE\", name: \"Germany\", flag: \"🇩🇪\" },\n  { code: \"FR\", name: \"France\", flag: \"🇫🇷\" },\n  { code: \"JP\", name: \"Japan\", flag: \"🇯🇵\" },\n  { code: \"KR\", name: \"South Korea\", flag: \"🇰🇷\" },\n  { code: \"SG\", name: \"Singapore\", flag: \"🇸🇬\" },\n  { code: \"MY\", name: \"Malaysia\", flag: \"🇲🇾\" },\n  { code: \"TH\", name: \"Thailand\", flag: \"🇹🇭\" },\n  { code: \"ID\", name: \"Indonesia\", flag: \"🇮🇩\" },\n  { code: \"PH\", name: \"Philippines\", flag: \"🇵🇭\" },\n  { code: \"VN\", name: \"Vietnam\", flag: \"🇻🇳\" },\n];\n\nexport const LANGUAGES = [\n  { code: \"en\", name: \"English\" },\n  { code: \"dz\", name: \"Dzongkha\" },\n  { code: \"hi\", name: \"Hindi\" },\n  { code: \"es\", name: \"Spanish\" },\n  { code: \"fr\", name: \"French\" },\n  { code: \"de\", name: \"German\" },\n  { code: \"ja\", name: \"Japanese\" },\n  { code: \"ko\", name: \"Korean\" },\n  { code: \"zh\", name: \"Chinese\" },\n];\n\nexport const PACKAGE_IMAGES = {\n  PUBG: \"https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.midasbuy.com%2Fboku%2Fph%2Fshop%2Fpubgm&psig=AOvVaw1LeenLUb25CISM-DEUCAqL&ust=1758274765315000&source=images&cd=vfe&opi=89978449&ved=0CBUQjRxqFwoTCNCuwoiC4o8DFQAAAAAdAAAAABAE\",\n  MLBB: \"https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png\"\n};\n\nexport const DEFAULT_PACKAGES = {\n  PUBG: [\n    { amount: 60, usdtValue: 1.5 },\n    { amount: 325, usdtValue: 6.5 },\n    { amount: 660, usdtValue: 12.0 },\n    { amount: 1800, usdtValue: 25.0 },\n    { amount: 3850, usdtValue: 49.0 },\n    { amount: 8100, usdtValue: 96.0 },\n    { amount: 16200, usdtValue: 186.0 },\n    { amount: 24300, usdtValue: 278.0 },\n    { amount: 32400, usdtValue: 369.0 },\n    { amount: 40500, usdtValue: 459.0 },\n  ],\n  MLBB: [\n    { amount: 56, usdtValue: 3.0 },\n    { amount: 278, usdtValue: 6.0 },\n    { amount: 571, usdtValue: 11.0 },\n    { amount: 1783, usdtValue: 33.0 },\n    { amount: 3005, usdtValue: 52.0 },\n    { amount: 6012, usdtValue: 99.0 },\n    { amount: 12000, usdtValue: 200.0 },\n  ]\n};\n","size_bytes":3208},"client/src/lib/pi-sdk.ts":{"content":"declare global {\n  interface Window {\n    Pi: {\n      init: (config: { version: string; sandbox?: boolean }) => void;\n      authenticate: (\n        scopes: string[], \n        onIncompletePaymentFound?: (payment: any) => void\n      ) => Promise<{ accessToken: string; user: { uid: string; username: string } }>;\n      createPayment: (\n        paymentData: {\n          amount: number;\n          memo: string;\n          metadata: Record<string, any>;\n        },\n        callbacks: {\n          onReadyForServerApproval: (paymentId: string) => void;\n          onReadyForServerCompletion: (paymentId: string, txid: string) => void;\n          onCancel: (paymentId: string) => void;\n          onError: (error: Error, payment?: any) => void;\n        }\n      ) => void;\n      openShareDialog: (title: string, message: string) => void;\n      nativeFeaturesList: () => Promise<string[]>;\n    };\n  }\n}\n\nexport class PiSDK {\n  private static instance: PiSDK;\n  private initialized = false;\n\n  static getInstance(): PiSDK {\n    if (!PiSDK.instance) {\n      PiSDK.instance = new PiSDK();\n    }\n    return PiSDK.instance;\n  }\n\n  init(sandbox: boolean = true): void {\n    if (this.initialized) return;\n    \n    if (typeof window !== 'undefined' && window.Pi) {\n      window.Pi.init({ \n        version: \"2.0\", \n        sandbox \n      });\n      this.initialized = true;\n    } else {\n      console.error('Pi SDK not loaded');\n    }\n  }\n\n  async authenticate(scopes: string[] = ['payments', 'username']): Promise<{ accessToken: string; user: { uid: string; username: string } } | null> {\n    if (!this.initialized || !window.Pi) {\n      throw new Error('Pi SDK not initialized');\n    }\n\n    try {\n      const authResult = await window.Pi.authenticate(scopes);\n      return authResult;\n    } catch (error) {\n      console.error('Pi authentication failed:', error);\n      return null;\n    }\n  }\n\n  createPayment(\n    paymentData: {\n      amount: number;\n      memo: string;\n      metadata: Record<string, any>;\n    },\n    callbacks: {\n      onReadyForServerApproval: (paymentId: string) => void;\n      onReadyForServerCompletion: (paymentId: string, txid: string) => void;\n      onCancel: (paymentId: string) => void;\n      onError: (error: Error, payment?: any) => void;\n    }\n  ): void {\n    if (!this.initialized || !window.Pi) {\n      throw new Error('Pi SDK not initialized');\n    }\n\n    window.Pi.createPayment(paymentData, callbacks);\n  }\n\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n}\n\nexport const piSDK = PiSDK.getInstance();\n","size_bytes":2530},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about-us.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BRAND_LOGOS, CONTACT_INFO, SOCIAL_LINKS } from '@/lib/constants';\n\nexport default function AboutUs() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"about-us-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <img \n              src={BRAND_LOGOS.B4U} \n              alt=\"B4U Esports Logo\" \n              className=\"h-20 w-auto mr-4\"\n              data-testid=\"about-us-logo\"\n            />\n            <div>\n              <h1 className=\"text-4xl font-bold mb-2\">About B4U Esports</h1>\n              <p className=\"text-muted-foreground\">Pioneering the Future of Gaming Commerce</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-rocket text-primary mr-3\"></i>\n                Our Mission\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>\n                B4U Esports is dedicated to revolutionizing the gaming marketplace by seamlessly integrating cryptocurrency payments through Pi Network. We believe that gaming should be accessible, secure, and innovative, bridging the gap between traditional gaming commerce and the future of digital currency.\n              </p>\n              <p>\n                Our mission is to empower gamers worldwide with a safe, reliable, and cutting-edge platform where they can purchase in-game currencies using Pi coins, creating a new standard for digital gaming transactions.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-eye text-gaming-blue mr-3\"></i>\n                Our Vision\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>\n                To become the world's leading Pi Network-integrated gaming marketplace, setting the standard for cryptocurrency adoption in the gaming industry. We envision a future where digital currency transactions are as natural as traditional payments, making gaming more inclusive and accessible globally.\n              </p>\n              <p>\n                We strive to be the bridge that connects the gaming community with the revolutionary potential of Pi Network, creating opportunities for millions of gamers to participate in the digital economy.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-heart text-gaming-red mr-3\"></i>\n                Our Values\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"value-security\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-blue\">\n                    <i className=\"fas fa-shield-alt mr-2\"></i>Security First\n                  </h4>\n                  <p>We prioritize the security of our users' data and transactions, implementing industry-leading security measures and Pi Network's cryptographic protection.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"value-innovation\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-purple\">\n                    <i className=\"fas fa-lightbulb mr-2\"></i>Innovation\n                  </h4>\n                  <p>We embrace cutting-edge technology and continuously evolve our platform to provide the best possible user experience.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"value-transparency\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-green\">\n                    <i className=\"fas fa-balance-scale mr-2\"></i>Transparency\n                  </h4>\n                  <p>We believe in open communication with our users, providing clear information about pricing, policies, and processes.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"value-community\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-gold\">\n                    <i className=\"fas fa-users mr-2\"></i>Community Focus\n                  </h4>\n                  <p>Our users are at the heart of everything we do. We listen to feedback and continuously improve based on community needs.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-handshake text-gaming-purple mr-3\"></i>\n                Pi Network Partnership\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <div className=\"flex items-start space-x-4\">\n                <img \n                  src={BRAND_LOGOS.PI} \n                  alt=\"Pi Network Logo\" \n                  className=\"w-16 h-16 rounded-full mt-2\"\n                  data-testid=\"pi-network-logo\"\n                />\n                <div>\n                  <p>\n                    Our partnership with Pi Network represents a significant milestone in bringing cryptocurrency to the gaming world. By integrating Pi Network's revolutionary payment system, we offer users a secure, fast, and innovative way to purchase gaming currencies.\n                  </p>\n                  <p>\n                    This collaboration allows us to leverage Pi Network's growing ecosystem while providing their community with practical utility for their Pi coins in the gaming space.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-gamepad text-gaming-blue mr-3\"></i>\n                Gaming Excellence\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We specialize in providing premium gaming currency services for popular mobile games:</p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-4\">\n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"game-pubg\">\n                  <div className=\"flex items-center mb-3\">\n                    <img \n                      src=\"https://cdn.midasbuy.com/images/pubgm_app-icon_512x512%281%29.e9f7efc0.png\" \n                      alt=\"PUBG Mobile\" \n                      className=\"w-12 h-12 mr-3\"\n                    />\n                    <h4 className=\"text-lg font-semibold\">PUBG Mobile</h4>\n                  </div>\n                  <p>Providing UC (Unknown Cash) packages for one of the world's most popular battle royale games, enabling players to enhance their gaming experience.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"game-mlbb\">\n                  <div className=\"flex items-center mb-3\">\n                    <img \n                      src=\"https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTT-Neggt-JpAh4eDx84JswmFwJMOa4pcfhqtcTcxtywIGC4IfB\" \n                      alt=\"Mobile Legends\" \n                      className=\"w-12 h-12 mr-3\"\n                    />\n                    <h4 className=\"text-lg font-semibold\">Mobile Legends: Bang Bang</h4>\n                  </div>\n                  <p>Offering Diamond packages for the leading MOBA game, helping players unlock heroes, skins, and premium content.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-chart-line text-gaming-green mr-3\"></i>\n                Why Choose B4U Esports?\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4\" data-testid=\"feature-realtime\">\n                  <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <i className=\"fas fa-clock text-2xl text-white\"></i>\n                  </div>\n                  <h4 className=\"font-semibold mb-2\">Real-Time Pricing</h4>\n                  <p className=\"text-sm\">Live Pi/USD conversion rates updated every 60 seconds for accurate pricing.</p>\n                </div>\n                \n                <div className=\"text-center p-4\" data-testid=\"feature-security\">\n                  <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <i className=\"fas fa-lock text-2xl text-white\"></i>\n                  </div>\n                  <h4 className=\"font-semibold mb-2\">Secure Transactions</h4>\n                  <p className=\"text-sm\">Protected by Pi Network's advanced cryptographic security and our robust infrastructure.</p>\n                </div>\n                \n                <div className=\"text-center p-4\" data-testid=\"feature-support\">\n                  <div className=\"w-16 h-16 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                    <i className=\"fas fa-headset text-2xl text-white\"></i>\n                  </div>\n                  <h4 className=\"font-semibold mb-2\">24/7 Support</h4>\n                  <p className=\"text-sm\">Round-the-clock customer support to assist with any questions or issues.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-phone text-primary mr-3\"></i>\n                Get in Touch\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We'd love to hear from you! Whether you have questions, feedback, or need support, our team is here to help.</p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6\">\n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"contact-info\">\n                  <h4 className=\"font-semibold mb-3\">Contact Information</h4>\n                  <div className=\"space-y-2\">\n                    <p className=\"flex items-center\">\n                      <i className=\"fas fa-envelope text-primary mr-2\"></i>\n                      <a href={`mailto:${CONTACT_INFO.EMAIL}`} className=\"text-primary hover:underline\">\n                        {CONTACT_INFO.EMAIL}\n                      </a>\n                    </p>\n                    <p className=\"flex items-center\">\n                      <i className=\"fas fa-phone text-primary mr-2\"></i>\n                      <a href={`tel:${CONTACT_INFO.PHONE}`} className=\"text-primary hover:underline\">\n                        {CONTACT_INFO.PHONE}\n                      </a>\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"social-media\">\n                  <h4 className=\"font-semibold mb-3\">Follow Us</h4>\n                  <div className=\"flex space-x-4\">\n                    <a href={SOCIAL_LINKS.FACEBOOK} className=\"text-blue-500 hover:text-blue-400 transition-colors\">\n                      <i className=\"fab fa-facebook text-2xl\"></i>\n                    </a>\n                    <a href={SOCIAL_LINKS.YOUTUBE} className=\"text-red-500 hover:text-red-400 transition-colors\">\n                      <i className=\"fab fa-youtube text-2xl\"></i>\n                    </a>\n                    <a href={SOCIAL_LINKS.TIKTOK} className=\"text-pink-500 hover:text-pink-400 transition-colors\">\n                      <i className=\"fab fa-tiktok text-2xl\"></i>\n                    </a>\n                    <a href={SOCIAL_LINKS.INSTAGRAM} className=\"text-purple-500 hover:text-purple-400 transition-colors\">\n                      <i className=\"fab fa-instagram text-2xl\"></i>\n                    </a>\n                    <a href={SOCIAL_LINKS.LINKEDIN} className=\"text-blue-600 hover:text-blue-500 transition-colors\">\n                      <i className=\"fab fa-linkedin text-2xl\"></i>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-certificate text-gaming-gold mr-3\"></i>\n                Our Commitment\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>\n                At B4U Esports, we are committed to providing a safe, reliable, and innovative platform for all gamers. We continuously invest in technology, security, and user experience to ensure that our platform meets the highest standards of quality and reliability.\n              </p>\n              <p>\n                As we grow and evolve, we remain dedicated to our core mission of making gaming more accessible and enjoyable through the power of cryptocurrency and innovative technology.\n              </p>\n              <div className=\"bg-gradient-to-r from-gaming-blue to-gaming-purple p-6 rounded-lg mt-6 text-center\">\n                <p className=\"text-lg font-semibold text-white mb-2\">\n                  Thank you for choosing B4U Esports!\n                </p>\n                <p className=\"text-blue-100\">\n                  Together, we're building the future of gaming commerce.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14935},"client/src/pages/admin.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport AdminLoginModal from '@/components/admin-login-modal';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AdminUser {\n  id: string;\n  username: string;\n  email: string;\n  phone: string;\n  country: string;\n  totalSpent: number;\n  transactionCount: number;\n  isActive: boolean;\n}\n\ninterface AdminTransaction {\n  id: string;\n  user: { username: string; email: string };\n  package: { name: string; game: string };\n  piAmount: string;\n  usdAmount: string;\n  status: string;\n  createdAt: string;\n  paymentId: string;\n  txid?: string;\n}\n\ninterface AdminPackage {\n  id: string;\n  game: string;\n  name: string;\n  inGameAmount: number;\n  usdtValue: string;\n  isActive: boolean;\n}\n\ninterface Analytics {\n  totalUsers: number;\n  totalTransactions: number;\n  totalRevenue: number;\n  successRate: number;\n}\n\nexport default function AdminPanel() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [token, setToken] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: analytics } = useQuery<Analytics>({\n    queryKey: ['/api/admin/analytics'],\n    enabled: isAuthenticated && !!token,\n    meta: {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n    }\n  });\n\n  const { data: users } = useQuery<AdminUser[]>({\n    queryKey: ['/api/admin/users'],\n    enabled: isAuthenticated && !!token,\n    meta: {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n    }\n  });\n\n  const { data: transactions } = useQuery<AdminTransaction[]>({\n    queryKey: ['/api/admin/transactions'],\n    enabled: isAuthenticated && !!token,\n    meta: {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n    }\n  });\n\n  const { data: packages } = useQuery<AdminPackage[]>({\n    queryKey: ['/api/admin/packages'],\n    enabled: isAuthenticated && !!token,\n    meta: {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n    }\n  });\n\n  const updatePackageMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<AdminPackage> }) => {\n      const response = await apiRequest('PUT', `/api/admin/packages/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/packages'] });\n      toast({\n        title: \"Success\",\n        description: \"Package updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update package\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleLogin = (adminToken: string) => {\n    setToken(adminToken);\n    setIsAuthenticated(true);\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setToken(null);\n  };\n\n  const togglePackageStatus = (pkg: AdminPackage) => {\n    updatePackageMutation.mutate({\n      id: pkg.id,\n      data: { isActive: !pkg.isActive }\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'pending': return 'bg-yellow-500';\n      case 'failed': return 'bg-red-500';\n      case 'cancelled': return 'bg-gray-500';\n      default: return 'bg-blue-500';\n    }\n  };\n\n  const filteredUsers = users?.filter(user => \n    user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  if (!isAuthenticated) {\n    return (\n      <>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <ParticleBackground />\n          <Navigation isTestnet={import.meta.env.DEV} />\n          <div className=\"flex items-center justify-center min-h-[80vh]\">\n            <AdminLoginModal onLogin={handleLogin} />\n          </div>\n          <Footer />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"admin-panel\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      {/* Admin Header */}\n      <div className=\"bg-red-900/20 border-b border-red-500/30\" data-testid=\"admin-header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Admin Dashboard</h1>\n              <p className=\"text-muted-foreground\">B4U Esports Management Panel</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-red-500 text-white px-4 py-2 rounded-lg\">\n                <i className=\"fas fa-shield-alt mr-2\"></i>Admin Mode\n              </div>\n              <Button onClick={handleLogout} variant=\"outline\" data-testid=\"admin-logout\">\n                <i className=\"fas fa-sign-out-alt mr-2\"></i>Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Admin Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Overview */}\n        {analytics && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\" data-testid=\"admin-stats\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-users text-white\"></i>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-total-users\">{analytics.totalUsers}</p>\n                    <p className=\"text-sm text-muted-foreground\">Total Users</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-exchange-alt text-white\"></i>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-total-transactions\">{analytics.totalTransactions}</p>\n                    <p className=\"text-sm text-muted-foreground\">Transactions</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-coins text-white\"></i>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-total-revenue\">{analytics.totalRevenue.toFixed(1)} π</p>\n                    <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-percentage text-white\"></i>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-success-rate\">{analytics.successRate}%</p>\n                    <p className=\"text-sm text-muted-foreground\">Success Rate</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Admin Tabs */}\n        <Tabs defaultValue=\"users\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"admin-tabs\">\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n            <TabsTrigger value=\"transactions\" data-testid=\"tab-transactions\">Transactions</TabsTrigger>\n            <TabsTrigger value=\"packages\" data-testid=\"tab-packages\">Packages</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Users Management */}\n          <TabsContent value=\"users\">\n            <Card data-testid=\"users-management\">\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>User Management</CardTitle>\n                  <div className=\"flex space-x-4\">\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-64\"\n                      data-testid=\"search-users\"\n                    />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Username</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Country</TableHead>\n                        <TableHead>Total Spent</TableHead>\n                        <TableHead>Transactions</TableHead>\n                        <TableHead>Status</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredUsers.map((user) => (\n                        <TableRow key={user.id} data-testid={`user-row-${user.id}`}>\n                          <TableCell className=\"font-semibold\">{user.username}</TableCell>\n                          <TableCell>{user.email}</TableCell>\n                          <TableCell>{user.country}</TableCell>\n                          <TableCell className=\"font-mono text-green-400\">{user.totalSpent.toFixed(1)} π</TableCell>\n                          <TableCell>{user.transactionCount}</TableCell>\n                          <TableCell>\n                            <Badge className={user.isActive ? 'bg-green-500' : 'bg-red-500'}>\n                              {user.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Transactions */}\n          <TabsContent value=\"transactions\">\n            <Card data-testid=\"transactions-management\">\n              <CardHeader>\n                <CardTitle>Transaction Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>User</TableHead>\n                        <TableHead>Package</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Payment ID</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {transactions?.map((transaction) => (\n                        <TableRow key={transaction.id} data-testid={`transaction-row-${transaction.id}`}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-semibold\">{transaction.user.username}</div>\n                              <div className=\"text-sm text-muted-foreground\">{transaction.user.email}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-semibold\">{transaction.package.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">{transaction.package.game}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"font-mono text-green-400\">\n                            {transaction.piAmount} π\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={getStatusColor(transaction.status)}>\n                              {transaction.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {new Date(transaction.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell className=\"font-mono text-xs\">\n                            {transaction.paymentId.slice(0, 8)}...\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Packages */}\n          <TabsContent value=\"packages\">\n            <Card data-testid=\"packages-management\">\n              <CardHeader>\n                <CardTitle>Package Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Game</TableHead>\n                        <TableHead>Package</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>USDT Value</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {packages?.map((pkg) => (\n                        <TableRow key={pkg.id} data-testid={`package-row-${pkg.id}`}>\n                          <TableCell>\n                            <Badge variant={pkg.game === 'PUBG' ? 'default' : 'secondary'}>\n                              {pkg.game}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-semibold\">{pkg.name}</TableCell>\n                          <TableCell>{pkg.inGameAmount}</TableCell>\n                          <TableCell>${pkg.usdtValue}</TableCell>\n                          <TableCell>\n                            <Badge className={pkg.isActive ? 'bg-green-500' : 'bg-red-500'}>\n                              {pkg.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              size=\"sm\"\n                              variant={pkg.isActive ? 'destructive' : 'default'}\n                              onClick={() => togglePackageStatus(pkg)}\n                              disabled={updatePackageMutation.isPending}\n                              data-testid={`toggle-package-${pkg.id}`}\n                            >\n                              {pkg.isActive ? 'Disable' : 'Enable'}\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics */}\n          <TabsContent value=\"analytics\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\" data-testid=\"analytics-dashboard\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Revenue Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <p className=\"text-4xl font-bold text-green-400 mb-2\">\n                      {analytics?.totalRevenue.toFixed(1)} π\n                    </p>\n                    <p className=\"text-muted-foreground\">Total Platform Revenue</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Transaction Success</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <p className=\"text-4xl font-bold text-blue-400 mb-2\">\n                      {analytics?.successRate}%\n                    </p>\n                    <p className=\"text-muted-foreground\">Success Rate</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>User Growth</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <p className=\"text-4xl font-bold text-purple-400 mb-2\">\n                      {analytics?.totalUsers}\n                    </p>\n                    <p className=\"text-muted-foreground\">Registered Users</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Total Transactions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <p className=\"text-4xl font-bold text-orange-400 mb-2\">\n                      {analytics?.totalTransactions}\n                    </p>\n                    <p className=\"text-muted-foreground\">All Time</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":19104},"client/src/pages/dashboard.tsx":{"content":"import { usePiNetwork } from '@/hooks/use-pi-network';\nimport { usePiPrice } from '@/hooks/use-pi-price';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useState } from 'react';\nimport ParticleBackground from '@/components/particle-background';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ProfileModal from '@/components/profile-modal';\nimport PurchaseModal from '@/components/purchase-modal';\nimport PackageCard from '@/components/package-card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport type { Package, Transaction } from '@/types/pi-network';\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, logout, token } = usePiNetwork();\n  const { data: piPrice } = usePiPrice();\n  const [, setLocation] = useLocation();\n  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null);\n  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);\n  const [isPurchaseModalOpen, setIsPurchaseModalOpen] = useState(false);\n\n  // Redirect to landing if not authenticated\n  if (!isAuthenticated || !user) {\n    setLocation('/');\n    return null;\n  }\n\n  const { data: packages, isLoading: packagesLoading } = useQuery<Package[]>({\n    queryKey: ['/api/packages'],\n  });\n\n  const { data: transactions, isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: ['/api/transactions'],\n    enabled: !!token,\n  });\n\n  const pubgPackages = packages?.filter(pkg => pkg.game === 'PUBG') || [];\n  const mlbbPackages = packages?.filter(pkg => pkg.game === 'MLBB') || [];\n  const recentTransactions = transactions?.slice(0, 5) || [];\n\n  const handlePurchaseClick = (pkg: Package) => {\n    setSelectedPackage(pkg);\n    setIsPurchaseModalOpen(true);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation('/');\n  };\n\n  const formatWalletAddress = (address: string) => {\n    if (!address) return 'Not set';\n    return `${address.slice(0, 4)}...${address.slice(-4)}`;\n  };\n\n  const totalSpent = transactions?.reduce((sum, tx) => \n    tx.status === 'completed' ? sum + parseFloat(tx.piAmount) : sum, 0\n  ) || 0;\n\n  const completedTransactions = transactions?.filter(tx => tx.status === 'completed').length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"dashboard-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      {/* Dashboard Header */}\n      <div className=\"bg-card border-b border-border\" data-testid=\"dashboard-header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"user-greeting\">\n                Welcome back, {user.username}!\n              </h1>\n              <p className=\"text-muted-foreground font-mono\" data-testid=\"user-wallet\">\n                Wallet: {formatWalletAddress(user.walletAddress)}\n              </p>\n            </div>\n            \n            {/* Live Pi Price Ticker */}\n            {piPrice && (\n              <div className=\"pi-price-ticker px-6 py-3 rounded-lg\" data-testid=\"pi-price-dashboard\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-white/80\">Live Pi Price</p>\n                  <p className=\"text-2xl font-bold text-white\">${piPrice.price.toFixed(3)}</p>\n                  <p className=\"text-xs text-white/60\">Updated 60s ago</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\" data-testid=\"user-stats\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"text-sm text-muted-foreground\">Total Spent</h3>\n                <p className=\"text-2xl font-bold text-green-400 font-mono\" data-testid=\"stat-total-spent\">\n                  {totalSpent.toFixed(1)} π\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"text-sm text-muted-foreground\">Transactions</h3>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-transaction-count\">\n                  {completedTransactions}\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"text-sm text-muted-foreground\">Country</h3>\n                <p className=\"text-2xl font-bold text-blue-400\" data-testid=\"stat-country\">\n                  {user.country}\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"text-sm text-muted-foreground\">Status</h3>\n                <p className=\"text-2xl font-bold text-green-400\" data-testid=\"stat-status\">\n                  Active\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Dashboard Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Package Shop */}\n          <div className=\"lg:col-span-2\" data-testid=\"package-shop\">\n            <h2 className=\"text-2xl font-bold mb-6\">Package Shop</h2>\n            \n            <Tabs defaultValue=\"pubg\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"game-tabs\">\n                <TabsTrigger value=\"pubg\" data-testid=\"tab-pubg\">PUBG Mobile</TabsTrigger>\n                <TabsTrigger value=\"mlbb\" data-testid=\"tab-mlbb\">Mobile Legends</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"pubg\" className=\"mt-8\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\" data-testid=\"pubg-packages\">\n                  {packagesLoading ? (\n                    <div className=\"col-span-2 text-center text-muted-foreground\" data-testid=\"loading-packages\">\n                      Loading packages...\n                    </div>\n                  ) : (\n                    pubgPackages.map((pkg) => (\n                      <PackageCard\n                        key={pkg.id}\n                        package={pkg}\n                        onPurchase={() => handlePurchaseClick(pkg)}\n                        data-testid={`package-card-${pkg.id}`}\n                      />\n                    ))\n                  )}\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"mlbb\" className=\"mt-8\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\" data-testid=\"mlbb-packages\">\n                  {packagesLoading ? (\n                    <div className=\"col-span-2 text-center text-muted-foreground\" data-testid=\"loading-packages\">\n                      Loading packages...\n                    </div>\n                  ) : (\n                    mlbbPackages.map((pkg) => (\n                      <PackageCard\n                        key={pkg.id}\n                        package={pkg}\n                        onPurchase={() => handlePurchaseClick(pkg)}\n                        data-testid={`package-card-${pkg.id}`}\n                      />\n                    ))\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-8\" data-testid=\"dashboard-sidebar\">\n            {/* Quick Actions */}\n            <Card data-testid=\"quick-actions\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  onClick={() => setIsProfileModalOpen(true)}\n                  className=\"w-full bg-secondary hover:bg-secondary/90 text-secondary-foreground\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  <i className=\"fas fa-user mr-2\"></i>Edit Profile\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full\"\n                  data-testid=\"button-view-history\"\n                >\n                  <i className=\"fas fa-history mr-2\"></i>View History\n                </Button>\n                <Button \n                  onClick={handleLogout}\n                  variant=\"destructive\"\n                  className=\"w-full\"\n                  data-testid=\"button-logout\"\n                >\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>Logout\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Recent Transactions */}\n            <Card data-testid=\"recent-transactions\">\n              <CardHeader>\n                <CardTitle>Recent Transactions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {transactionsLoading ? (\n                  <div className=\"text-muted-foreground\" data-testid=\"loading-transactions\">Loading...</div>\n                ) : recentTransactions.length === 0 ? (\n                  <div className=\"text-muted-foreground\" data-testid=\"no-transactions\">No transactions yet</div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentTransactions.map((transaction, index) => (\n                      <div \n                        key={transaction.id} \n                        className=\"border-b border-border pb-3 last:border-b-0\"\n                        data-testid={`transaction-${index}`}\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-semibold text-sm\">\n                              {packages?.find(p => p.id === transaction.packageId)?.name || 'Unknown Package'}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {new Date(transaction.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-mono text-green-400 text-sm\">\n                              -{transaction.piAmount} π\n                            </p>\n                            <p className=\"text-xs capitalize text-green-400\">\n                              {transaction.status === 'completed' ? '✅ Completed' : \n                               transaction.status === 'pending' ? '🔄 Pending' : \n                               transaction.status === 'failed' ? '❌ Failed' : transaction.status}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <ProfileModal \n        isOpen={isProfileModalOpen} \n        onClose={() => setIsProfileModalOpen(false)} \n      />\n      \n      {selectedPackage && (\n        <PurchaseModal \n          isOpen={isPurchaseModalOpen} \n          onClose={() => {\n            setIsPurchaseModalOpen(false);\n            setSelectedPackage(null);\n          }}\n          package={selectedPackage}\n        />\n      )}\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11821},"client/src/pages/data-protection.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function DataProtection() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"data-protection-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Data Protection Policy</h1>\n          <p className=\"text-muted-foreground\">Last updated: January 2025</p>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. Our Commitment to Data Protection</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>B4U Esports is committed to protecting your personal data and respecting your privacy rights. This Data Protection Policy outlines how we collect, process, store, and protect your information in compliance with applicable data protection laws and regulations.</p>\n              <p>We implement robust technical and organizational measures to ensure the security and confidentiality of your personal data throughout our systems and processes.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>2. Legal Basis for Processing</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We process your personal data based on the following legal grounds:</p>\n              <ul>\n                <li><strong>Consent:</strong> You have given clear consent for us to process your data for specific purposes</li>\n                <li><strong>Contract Performance:</strong> Processing is necessary to fulfill our service obligations to you</li>\n                <li><strong>Legal Obligations:</strong> We must process your data to comply with legal requirements</li>\n                <li><strong>Legitimate Interests:</strong> Processing serves our legitimate business interests while respecting your rights</li>\n                <li><strong>Vital Interests:</strong> Processing protects your essential interests or those of others</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Data Collection and Processing</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We collect and process the following types of personal data:</p>\n              <h4>Identity Data:</h4>\n              <ul>\n                <li>Pi Network username and UID</li>\n                <li>Email address and phone number</li>\n                <li>Country and language preferences</li>\n              </ul>\n              <h4>Gaming Data:</h4>\n              <ul>\n                <li>PUBG Mobile IGN and UID</li>\n                <li>Mobile Legends User ID and Zone ID</li>\n                <li>Gaming preferences and history</li>\n              </ul>\n              <h4>Transaction Data:</h4>\n              <ul>\n                <li>Payment history and amounts</li>\n                <li>Pi Network transaction details</li>\n                <li>Purchase patterns and preferences</li>\n              </ul>\n              <h4>Technical Data:</h4>\n              <ul>\n                <li>IP address and device information</li>\n                <li>Browser type and settings</li>\n                <li>Usage analytics and performance data</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>4. Data Security Measures</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We implement comprehensive security measures to protect your data:</p>\n              <h4>Technical Safeguards:</h4>\n              <ul>\n                <li>End-to-end encryption for data transmission</li>\n                <li>Secure database storage with encryption at rest</li>\n                <li>Multi-factor authentication for admin access</li>\n                <li>Regular security audits and penetration testing</li>\n                <li>Automated backup and disaster recovery systems</li>\n              </ul>\n              <h4>Organizational Safeguards:</h4>\n              <ul>\n                <li>Limited access to personal data on a need-to-know basis</li>\n                <li>Regular staff training on data protection</li>\n                <li>Confidentiality agreements for all personnel</li>\n                <li>Incident response procedures</li>\n                <li>Data protection impact assessments</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>5. Data Retention and Deletion</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We retain your personal data only for as long as necessary:</p>\n              <ul>\n                <li><strong>Active Accounts:</strong> Data retained while your account is active and in use</li>\n                <li><strong>Transaction Records:</strong> Kept for 7 years for legal and tax compliance</li>\n                <li><strong>Marketing Data:</strong> Retained until you withdraw consent or object</li>\n                <li><strong>Support Records:</strong> Kept for 3 years after last contact</li>\n                <li><strong>Legal Hold:</strong> Extended retention if required for legal proceedings</li>\n              </ul>\n              <p>When retention periods expire, we securely delete or anonymize your data using industry-standard methods.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>6. Your Data Protection Rights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>You have the following rights regarding your personal data:</p>\n              <ul>\n                <li><strong>Right of Access:</strong> Request information about your personal data we process</li>\n                <li><strong>Right of Rectification:</strong> Correct inaccurate or incomplete data</li>\n                <li><strong>Right of Erasure:</strong> Request deletion of your personal data (\"right to be forgotten\")</li>\n                <li><strong>Right to Restrict Processing:</strong> Limit how we use your data</li>\n                <li><strong>Right to Data Portability:</strong> Receive your data in a structured, machine-readable format</li>\n                <li><strong>Right to Object:</strong> Object to processing based on legitimate interests</li>\n                <li><strong>Right to Withdraw Consent:</strong> Withdraw consent for consent-based processing</li>\n              </ul>\n              <p>To exercise these rights, contact us at <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>7. International Data Transfers</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>When we transfer your data internationally, we ensure adequate protection through:</p>\n              <ul>\n                <li><strong>Adequacy Decisions:</strong> Transfers to countries with adequate data protection laws</li>\n                <li><strong>Standard Contractual Clauses:</strong> EU-approved clauses for international transfers</li>\n                <li><strong>Binding Corporate Rules:</strong> Internal rules ensuring consistent protection</li>\n                <li><strong>Certification Schemes:</strong> Industry-recognized data protection certifications</li>\n                <li><strong>Codes of Conduct:</strong> Adherence to approved industry standards</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>8. Third-Party Data Sharing</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We share your data with third parties only when necessary and with appropriate safeguards:</p>\n              <h4>Service Providers:</h4>\n              <ul>\n                <li>Cloud hosting and storage providers</li>\n                <li>Email and communication services</li>\n                <li>Analytics and monitoring tools</li>\n                <li>Customer support platforms</li>\n              </ul>\n              <h4>Game Publishers:</h4>\n              <ul>\n                <li>PUBG Mobile (Tencent/Krafton) for UC delivery</li>\n                <li>Mobile Legends (Moonton) for Diamond delivery</li>\n              </ul>\n              <h4>Payment Processors:</h4>\n              <ul>\n                <li>Pi Network for authentication and payments</li>\n              </ul>\n              <p>All third parties are contractually obligated to protect your data and use it only for specified purposes.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>9. Data Breach Response</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>In the event of a data breach, we have established procedures to:</p>\n              <ul>\n                <li><strong>Detection:</strong> Automated monitoring systems detect potential breaches</li>\n                <li><strong>Assessment:</strong> Rapid evaluation of breach scope and impact</li>\n                <li><strong>Containment:</strong> Immediate steps to stop the breach and secure systems</li>\n                <li><strong>Notification:</strong> Authorities notified within 72 hours if required</li>\n                <li><strong>Communication:</strong> Affected users informed without undue delay</li>\n                <li><strong>Remediation:</strong> Steps taken to prevent future occurrences</li>\n                <li><strong>Documentation:</strong> Full incident report and lessons learned</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>10. Privacy by Design</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We implement privacy by design principles throughout our operations:</p>\n              <ul>\n                <li><strong>Data Minimization:</strong> Collect only data necessary for our services</li>\n                <li><strong>Purpose Limitation:</strong> Use data only for stated purposes</li>\n                <li><strong>Storage Limitation:</strong> Retain data only as long as necessary</li>\n                <li><strong>Accuracy:</strong> Ensure data is accurate and up-to-date</li>\n                <li><strong>Security:</strong> Implement appropriate technical and organizational measures</li>\n                <li><strong>Accountability:</strong> Demonstrate compliance with data protection principles</li>\n                <li><strong>Transparency:</strong> Provide clear information about data processing</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>11. Children's Data Protection</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We take special care to protect children's personal data:</p>\n              <ul>\n                <li>We do not knowingly collect data from children under 13</li>\n                <li>Enhanced verification procedures for users under 18</li>\n                <li>Parental consent mechanisms where required</li>\n                <li>Additional security measures for young users</li>\n                <li>Regular reviews of age verification processes</li>\n                <li>Immediate deletion if we discover underage data collection</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>12. Contact and Complaints</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>For data protection inquiries or complaints:</p>\n              <div className=\"bg-muted p-4 rounded-lg mt-4\">\n                <p><strong>Data Protection Officer</strong></p>\n                <p>B4U Esports</p>\n                <p>Email: <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n                <p>Phone: <a href=\"tel:+97517875099\" className=\"text-primary\">+975 17875099</a></p>\n                <p>Response Time: Within 30 days</p>\n              </div>\n              <p className=\"mt-4\">You also have the right to lodge a complaint with your local data protection authority if you believe we have not addressed your concerns adequately.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13539},"client/src/pages/landing.tsx":{"content":"import { usePiNetwork } from '@/hooks/use-pi-network';\nimport { usePiPrice } from '@/hooks/use-pi-price';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport ParticleBackground from '@/components/particle-background';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport { Button } from '@/components/ui/button';\nimport { BRAND_LOGOS, GAME_LOGOS } from '@/lib/constants';\nimport type { Package } from '@/types/pi-network';\n\nexport default function Landing() {\n  const { authenticate, isAuthenticated, isLoading: piLoading } = usePiNetwork();\n  const { data: piPrice } = usePiPrice();\n  const [, setLocation] = useLocation();\n\n  const { data: packages, isLoading: packagesLoading } = useQuery<Package[]>({\n    queryKey: ['/api/packages'],\n  });\n\n  // Redirect to dashboard if already authenticated\n  if (isAuthenticated) {\n    setLocation('/dashboard');\n    return null;\n  }\n\n  const handlePiLogin = async () => {\n    try {\n      await authenticate();\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  const featuredPubgPackages = packages?.filter(pkg => pkg.game === 'PUBG').slice(0, 2) || [];\n  const featuredMlbbPackages = packages?.filter(pkg => pkg.game === 'MLBB').slice(0, 2) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"landing-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center px-4 sm:px-6 lg:px-8\" data-testid=\"hero-section\">\n        <div className=\"max-w-7xl w-full\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\" data-testid=\"hero-title\">\n              Gaming Currency\n            </h1>\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-8 text-foreground\" data-testid=\"hero-subtitle\">\n              Powered by Pi Network\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-12 max-w-3xl mx-auto\" data-testid=\"hero-description\">\n              Purchase PUBG UC and Mobile Legends Diamonds using Pi coins. Fast, secure, and integrated with Pi Network's revolutionary payment system.\n            </p>\n\n            {/* Pi Network Login Button */}\n            <div className=\"mb-8\">\n              <Button\n                onClick={handlePiLogin}\n                disabled={piLoading}\n                className=\"gradient-border inline-block p-0 h-auto bg-transparent hover:bg-transparent\"\n                data-testid=\"pi-login-button\"\n              >\n                <div className=\"gradient-border-content px-12 py-4 flex items-center space-x-4\">\n                  <img \n                    src={BRAND_LOGOS.PI} \n                    alt=\"Pi Network Logo\" \n                    className=\"w-8 h-8 rounded-full\"\n                    data-testid=\"pi-logo-button\"\n                  />\n                  <span className=\"text-xl font-semibold\">\n                    {piLoading ? 'Connecting...' : 'Sign In with Pi Network'}\n                  </span>\n                </div>\n              </Button>\n              \n              {/* Testnet Disclaimer */}\n              <p className=\"text-sm text-amber-400 mt-4 max-w-2xl mx-auto\" data-testid=\"testnet-disclaimer\">\n                <i className=\"fas fa-info-circle mr-2\"></i>\n                Note: Transactions are currently processed on the Pi Testnet. No real Pi coins will be deducted from your mainnet wallet during purchases.\n              </p>\n            </div>\n          </div>\n\n          {/* Why Choose Us Section */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-20\" data-testid=\"features-section\">\n            <div className=\"game-card p-8 rounded-xl text-center\" data-testid=\"feature-pricing\">\n              <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-chart-line text-2xl text-white\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Live Pricing</h3>\n              <p className=\"text-muted-foreground\">Real-time Pi/USD conversion rates updated every 60 seconds for accurate pricing.</p>\n            </div>\n            \n            <div className=\"game-card p-8 rounded-xl text-center\" data-testid=\"feature-security\">\n              <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-shield-alt text-2xl text-white\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Secure Payments</h3>\n              <p className=\"text-muted-foreground\">Protected by Pi Network's advanced cryptographic payment system.</p>\n            </div>\n            \n            <div className=\"game-card p-8 rounded-xl text-center\" data-testid=\"feature-support\">\n              <div className=\"w-16 h-16 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-headset text-2xl text-white\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">24/7 Support</h3>\n              <p className=\"text-muted-foreground\">Round-the-clock customer support for all your gaming needs.</p>\n            </div>\n          </div>\n\n          {/* Featured Packages */}\n          <div className=\"text-center mb-12\" data-testid=\"featured-packages\">\n            <h3 className=\"text-3xl font-bold mb-8\">Featured Packages</h3>\n            \n            {/* Live Pi Price Display */}\n            {piPrice && (\n              <div className=\"mb-8\">\n                <div className=\"pi-price-ticker px-6 py-3 rounded-lg inline-block\" data-testid=\"pi-price-ticker\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-white/80\">Live Pi Price</p>\n                    <p className=\"text-2xl font-bold text-white\">${piPrice.price.toFixed(3)}</p>\n                    <p className=\"text-xs text-white/60\">Updated 60s ago</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n              {/* PUBG Package */}\n              <div className=\"game-card p-8 rounded-xl\" data-testid=\"featured-pubg\">\n                <div className=\"flex items-center justify-center mb-6\">\n                  <img \n                    src={GAME_LOGOS.PUBG} \n                    alt=\"PUBG Mobile Logo\" \n                    className=\"w-16 h-16 mr-4\"\n                    data-testid=\"pubg-logo\"\n                  />\n                  <h4 className=\"text-2xl font-bold\">PUBG Mobile</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  {featuredPubgPackages.map((pkg, index) => (\n                    <div key={pkg.id} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\" data-testid={`pubg-package-${index}`}>\n                      <span>{pkg.name}</span>\n                      <span className=\"font-mono text-green-400\">\n                        {pkg.piPrice ? `${pkg.piPrice.toFixed(1)} π` : 'Loading...'}\n                      </span>\n                    </div>\n                  ))}\n                  {packagesLoading && (\n                    <div className=\"text-muted-foreground\" data-testid=\"loading-packages\">Loading packages...</div>\n                  )}\n                </div>\n              </div>\n\n              {/* MLBB Package */}\n              <div className=\"game-card p-8 rounded-xl\" data-testid=\"featured-mlbb\">\n                <div className=\"flex items-center justify-center mb-6\">\n                  <img \n                    src={GAME_LOGOS.MLBB} \n                    alt=\"Mobile Legends Logo\" \n                    className=\"w-16 h-16 mr-4\"\n                    data-testid=\"mlbb-logo\"\n                  />\n                  <h4 className=\"text-2xl font-bold\">Mobile Legends</h4>\n                </div>\n                <div className=\"space-y-4\">\n                  {featuredMlbbPackages.map((pkg, index) => (\n                    <div key={pkg.id} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\" data-testid={`mlbb-package-${index}`}>\n                      <span>{pkg.name}</span>\n                      <span className=\"font-mono text-green-400\">\n                        {pkg.piPrice ? `${pkg.piPrice.toFixed(1)} π` : 'Loading...'}\n                      </span>\n                    </div>\n                  ))}\n                  {packagesLoading && (\n                    <div className=\"text-muted-foreground\" data-testid=\"loading-packages\">Loading packages...</div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8993},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/our-history.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { BRAND_LOGOS } from '@/lib/constants';\n\nexport default function OurHistory() {\n  const milestones = [\n    {\n      year: \"2023\",\n      title: \"Foundation & Vision\",\n      description: \"B4U Esports was founded with a vision to revolutionize gaming commerce through cryptocurrency integration.\",\n      icon: \"fa-rocket\",\n      color: \"bg-gaming-blue\"\n    },\n    {\n      year: \"2024\",\n      title: \"Pi Network Partnership\",\n      description: \"Strategic partnership with Pi Network established, becoming one of the first gaming platforms to integrate Pi cryptocurrency.\",\n      icon: \"fa-handshake\",\n      color: \"bg-gaming-purple\"\n    },\n    {\n      year: \"2024\",\n      title: \"PUBG Mobile Integration\",\n      description: \"Successfully launched PUBG Mobile UC purchasing system with real-time Pi currency conversion.\",\n      icon: \"fa-gamepad\",\n      color: \"bg-gaming-green\"\n    },\n    {\n      year: \"2024\",\n      title: \"Mobile Legends Support\",\n      description: \"Expanded services to include Mobile Legends: Bang Bang Diamond purchases, doubling our game portfolio.\",\n      icon: \"fa-gem\",\n      color: \"bg-gaming-gold\"\n    },\n    {\n      year: \"2025\",\n      title: \"Platform Maturity\",\n      description: \"Achieved full platform stability with 24/7 support, real-time pricing, and enhanced security features.\",\n      icon: \"fa-crown\",\n      color: \"bg-gaming-red\"\n    }\n  ];\n\n  const achievements = [\n    {\n      number: \"1000+\",\n      label: \"Happy Users\",\n      icon: \"fa-users\",\n      color: \"text-gaming-blue\"\n    },\n    {\n      number: \"5000+\",\n      label: \"Transactions\",\n      icon: \"fa-exchange-alt\",\n      color: \"text-gaming-green\"\n    },\n    {\n      number: \"99.9%\",\n      label: \"Uptime\",\n      icon: \"fa-server\",\n      color: \"text-gaming-purple\"\n    },\n    {\n      number: \"24/7\",\n      label: \"Support\",\n      icon: \"fa-headset\",\n      color: \"text-gaming-gold\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"our-history-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <img \n              src={BRAND_LOGOS.B4U} \n              alt=\"B4U Esports Logo\" \n              className=\"h-20 w-auto mr-4\"\n              data-testid=\"history-logo\"\n            />\n            <div>\n              <h1 className=\"text-4xl font-bold mb-2\">Our History</h1>\n              <p className=\"text-muted-foreground\">The Journey of Innovation and Growth</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-book text-primary mr-3\"></i>\n                Our Story\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>\n                B4U Esports began as a vision to bridge the gap between traditional gaming commerce and the emerging world of cryptocurrency. Founded by passionate gamers and technology enthusiasts, our company was born from the belief that gaming should be at the forefront of financial innovation.\n              </p>\n              <p>\n                From our humble beginnings to becoming a pioneer in Pi Network-integrated gaming services, our journey has been marked by continuous innovation, user-focused development, and an unwavering commitment to security and reliability.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-timeline text-gaming-blue mr-3\"></i>\n                Key Milestones\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-8\">\n                {milestones.map((milestone, index) => (\n                  <div key={index} className=\"flex items-start space-x-4\" data-testid={`milestone-${index}`}>\n                    <div className={`w-12 h-12 ${milestone.color} rounded-full flex items-center justify-center flex-shrink-0`}>\n                      <i className={`fas ${milestone.icon} text-white`}></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {milestone.year}\n                        </Badge>\n                        <h3 className=\"text-lg font-semibold\">{milestone.title}</h3>\n                      </div>\n                      <p className=\"text-muted-foreground\">{milestone.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-trophy text-gaming-gold mr-3\"></i>\n                Achievements by Numbers\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n                {achievements.map((achievement, index) => (\n                  <div key={index} className=\"text-center\" data-testid={`achievement-${index}`}>\n                    <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <i className={`fas ${achievement.icon} text-2xl ${achievement.color}`}></i>\n                    </div>\n                    <div className=\"text-2xl font-bold mb-1\">{achievement.number}</div>\n                    <div className=\"text-sm text-muted-foreground\">{achievement.label}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-lightbulb text-gaming-purple mr-3\"></i>\n                Innovation Highlights\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <div className=\"space-y-6\">\n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"innovation-pi-integration\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-blue\">\n                    <i className=\"fas fa-coins mr-2\"></i>First-to-Market Pi Integration\n                  </h4>\n                  <p>\n                    We were among the first gaming platforms to successfully integrate Pi Network's payment system, pioneering the use of Pi cryptocurrency for gaming transactions.\n                  </p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"innovation-realtime\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-green\">\n                    <i className=\"fas fa-chart-line mr-2\"></i>Real-Time Price Engine\n                  </h4>\n                  <p>\n                    Developed a sophisticated real-time pricing system that updates Pi/USD conversion rates every 60 seconds, ensuring accurate and fair pricing for all transactions.\n                  </p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"innovation-security\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-red\">\n                    <i className=\"fas fa-shield-alt mr-2\"></i>Advanced Security Framework\n                  </h4>\n                  <p>\n                    Implemented multi-layered security measures including blockchain verification, encrypted data storage, and secure payment processing to protect user transactions.\n                  </p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"innovation-automation\">\n                  <h4 className=\"text-lg font-semibold mb-2 text-gaming-purple\">\n                    <i className=\"fas fa-robot mr-2\"></i>Automated Delivery System\n                  </h4>\n                  <p>\n                    Created an automated delivery system that processes gaming currency purchases within 5-10 minutes, providing instant gratification for users.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-users text-gaming-blue mr-3\"></i>\n                Community Growth\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>\n                Our growth has been driven by the trust and support of our gaming community. From our first transaction to thousands of successful purchases, each milestone has been achieved through:\n              </p>\n              <ul>\n                <li><strong>User Feedback:</strong> Continuously improving based on community suggestions</li>\n                <li><strong>Transparency:</strong> Maintaining open communication about platform updates and changes</li>\n                <li><strong>Reliability:</strong> Ensuring consistent service quality and uptime</li>\n                <li><strong>Innovation:</strong> Staying ahead of technology trends and user needs</li>\n                <li><strong>Support:</strong> Providing responsive customer service and technical assistance</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-handshake text-gaming-purple mr-3\"></i>\n                Strategic Partnerships\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-4\">\n                  <img \n                    src={BRAND_LOGOS.PI} \n                    alt=\"Pi Network\" \n                    className=\"w-12 h-12 rounded-full mt-1\"\n                    data-testid=\"partner-pi-network\"\n                  />\n                  <div>\n                    <h4 className=\"text-lg font-semibold\">Pi Network</h4>\n                    <p className=\"text-muted-foreground\">\n                      Our foundational partnership with Pi Network enables secure, innovative cryptocurrency transactions for gaming purchases.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\">\n                  <img \n                    src=\"https://cdn.midasbuy.com/images/pubgm_app-icon_512x512%281%29.e9f7efc0.png\" \n                    alt=\"PUBG Mobile\" \n                    className=\"w-12 h-12 rounded-lg mt-1\"\n                    data-testid=\"partner-pubg\"\n                  />\n                  <div>\n                    <h4 className=\"text-lg font-semibold\">PUBG Mobile Ecosystem</h4>\n                    <p className=\"text-muted-foreground\">\n                      Authorized integration with PUBG Mobile's UC system, ensuring legitimate and secure currency delivery.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\">\n                  <img \n                    src=\"https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTT-Neggt-JpAh4eDx84JswmFwJMOa4pcfhqtcTcxtywIGC4IfB\" \n                    alt=\"Mobile Legends\" \n                    className=\"w-12 h-12 rounded-lg mt-1\"\n                    data-testid=\"partner-mlbb\"\n                  />\n                  <div>\n                    <h4 className=\"text-lg font-semibold\">Mobile Legends: Bang Bang</h4>\n                    <p className=\"text-muted-foreground\">\n                      Official partnership for Diamond delivery services, expanding our reach in the MOBA gaming community.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-road text-gaming-green mr-3\"></i>\n                Looking Forward\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>\n                As we continue to grow, our focus remains on innovation, security, and user satisfaction. Our roadmap includes:\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"future-games\">\n                  <h4 className=\"font-semibold mb-2 text-gaming-blue\">\n                    <i className=\"fas fa-plus mr-2\"></i>New Game Support\n                  </h4>\n                  <p className=\"text-sm\">Expanding to support more popular mobile games and their in-game currencies.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"future-features\">\n                  <h4 className=\"font-semibold mb-2 text-gaming-purple\">\n                    <i className=\"fas fa-cogs mr-2\"></i>Enhanced Features\n                  </h4>\n                  <p className=\"text-sm\">Advanced user dashboard, loyalty programs, and personalized gaming experiences.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"future-global\">\n                  <h4 className=\"font-semibold mb-2 text-gaming-green\">\n                    <i className=\"fas fa-globe mr-2\"></i>Global Expansion\n                  </h4>\n                  <p className=\"text-sm\">Extending our services to more countries and supporting additional payment methods.</p>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"future-technology\">\n                  <h4 className=\"font-semibold mb-2 text-gaming-gold\">\n                    <i className=\"fas fa-rocket mr-2\"></i>Next-Gen Technology\n                  </h4>\n                  <p className=\"text-sm\">Implementing AI-powered recommendations and blockchain-based transaction verification.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-heart text-gaming-red mr-3\"></i>\n                Thank You\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <div className=\"bg-gradient-to-r from-gaming-blue to-gaming-purple p-6 rounded-lg text-center\">\n                <h3 className=\"text-2xl font-bold text-white mb-4\">\n                  Thank You for Being Part of Our Journey\n                </h3>\n                <p className=\"text-blue-100 mb-4\">\n                  Every transaction, every piece of feedback, and every moment of trust you've placed in us has helped shape B4U Esports into what it is today.\n                </p>\n                <p className=\"text-blue-100\">\n                  Together, we're not just changing how gamers purchase in-game currencies – we're pioneering the future of gaming commerce.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16263},"client/src/pages/privacy-policy.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"privacy-policy-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Privacy Policy</h1>\n          <p className=\"text-muted-foreground\">Last updated: January 2025</p>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. Information We Collect</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>When you use B4U Esports services, we collect:</p>\n              <ul>\n                <li><strong>Pi Network Information:</strong> Your Pi Network username, UID, and wallet address through Pi Network authentication</li>\n                <li><strong>Personal Information:</strong> Email address, phone number, country, and language preferences</li>\n                <li><strong>Gaming Information:</strong> Game account details including PUBG Mobile IGN/UID and Mobile Legends User ID/Zone ID</li>\n                <li><strong>Transaction Data:</strong> Payment history, transaction amounts, and payment status</li>\n                <li><strong>Technical Information:</strong> IP address, browser type, device information, and usage data</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>2. How We Use Your Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We use your information to:</p>\n              <ul>\n                <li>Process and fulfill your gaming currency purchases</li>\n                <li>Authenticate your identity through Pi Network</li>\n                <li>Send purchase confirmations and transaction updates</li>\n                <li>Provide customer support and respond to inquiries</li>\n                <li>Improve our services and user experience</li>\n                <li>Comply with legal obligations and prevent fraud</li>\n                <li>Send important service announcements and updates</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Information Sharing</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We do not sell, trade, or rent your personal information. We may share your information only in the following circumstances:</p>\n              <ul>\n                <li><strong>Pi Network:</strong> Authentication and payment processing through Pi Network's secure infrastructure</li>\n                <li><strong>Game Publishers:</strong> Necessary game account information to deliver purchased gaming currency</li>\n                <li><strong>Service Providers:</strong> Trusted third-party services that help us operate our platform (email services, analytics)</li>\n                <li><strong>Legal Requirements:</strong> When required by law, regulation, or legal process</li>\n                <li><strong>Safety and Security:</strong> To protect our users, platform, and legal rights</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>4. Data Security</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We implement robust security measures to protect your information:</p>\n              <ul>\n                <li>SSL/TLS encryption for all data transmission</li>\n                <li>Secure storage of personal and financial information</li>\n                <li>Regular security audits and updates</li>\n                <li>Access controls and authentication requirements</li>\n                <li>Pi Network's cryptographic security for payment processing</li>\n                <li>Hashed storage of sensitive authentication data</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>5. Your Rights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>You have the right to:</p>\n              <ul>\n                <li><strong>Access:</strong> Request access to your personal information</li>\n                <li><strong>Correction:</strong> Update or correct inaccurate information</li>\n                <li><strong>Deletion:</strong> Request deletion of your account and personal data</li>\n                <li><strong>Portability:</strong> Request a copy of your data in a portable format</li>\n                <li><strong>Restriction:</strong> Limit how we process your information</li>\n                <li><strong>Withdrawal:</strong> Withdraw consent for data processing where applicable</li>\n              </ul>\n              <p>To exercise these rights, contact us at <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>6. Cookies and Tracking</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We use cookies and similar technologies to:</p>\n              <ul>\n                <li>Maintain your login session</li>\n                <li>Remember your preferences and settings</li>\n                <li>Analyze website usage and performance</li>\n                <li>Provide personalized content and features</li>\n              </ul>\n              <p>You can control cookie settings through your browser, though some features may not function properly if cookies are disabled.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>7. International Transfers</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Your information may be transferred to and processed in countries other than your residence. We ensure appropriate safeguards are in place to protect your data during international transfers, including:</p>\n              <ul>\n                <li>Compliance with applicable data protection laws</li>\n                <li>Contractual protections with service providers</li>\n                <li>Security measures equivalent to those in your home country</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>8. Children's Privacy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Our services are not intended for children under 13 years of age. We do not knowingly collect personal information from children under 13. If we become aware that we have collected such information, we will take steps to delete it promptly.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>9. Changes to This Policy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We may update this Privacy Policy periodically to reflect changes in our practices or applicable laws. We will notify you of material changes by:</p>\n              <ul>\n                <li>Posting the updated policy on our website</li>\n                <li>Sending email notifications to registered users</li>\n                <li>Displaying prominent notices on our platform</li>\n              </ul>\n              <p>Your continued use of our services after changes constitute acceptance of the updated policy.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>10. Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>If you have questions, concerns, or requests regarding this Privacy Policy or our data practices, please contact us:</p>\n              <div className=\"bg-muted p-4 rounded-lg mt-4\">\n                <p><strong>B4U Esports</strong></p>\n                <p>Email: <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n                <p>Phone: <a href=\"tel:+97517875099\" className=\"text-primary\">+975 17875099</a></p>\n                <p>We will respond to your inquiries within 30 days.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9223},"client/src/pages/refund-policy.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function RefundPolicy() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"refund-policy-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Refund Policy</h1>\n          <p className=\"text-muted-foreground\">Last updated: January 2025</p>\n        </div>\n\n        <div className=\"bg-red-500/20 border border-red-500 rounded-lg p-6 mb-8\">\n          <h2 className=\"text-xl font-bold text-red-400 mb-2\">\n            <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n            Important Notice\n          </h2>\n          <p className=\"text-red-300\">\n            <strong>All sales of digital in-game currency are final and non-refundable.</strong> \n            Please read this policy carefully before making any purchases.\n          </p>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. No Refund Policy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>B4U Esports operates a strict no-refund policy for all digital gaming currency purchases. This includes:</p>\n              <ul>\n                <li>PUBG Mobile UC (Unknown Cash)</li>\n                <li>Mobile Legends: Bang Bang Diamonds</li>\n                <li>All other in-game currencies offered on our platform</li>\n              </ul>\n              <p><strong>Once a transaction is completed and gaming currency is delivered to your account, the sale is final.</strong></p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>2. Reasons for No-Refund Policy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Our no-refund policy exists for several important reasons:</p>\n              <ul>\n                <li><strong>Digital Nature:</strong> Gaming currencies are digital goods that cannot be \"returned\" once delivered</li>\n                <li><strong>Instant Delivery:</strong> Currency is delivered immediately to your game account</li>\n                <li><strong>Fraud Prevention:</strong> Protects against fraudulent refund claims and chargebacks</li>\n                <li><strong>Publisher Requirements:</strong> Game publishers do not allow reversal of currency transactions</li>\n                <li><strong>Pi Network Integration:</strong> Cryptocurrency transactions are designed to be irreversible</li>\n                <li><strong>Operational Costs:</strong> Processing refunds would require significant additional resources</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Pre-Purchase Verification</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>To avoid issues, please verify the following before completing your purchase:</p>\n              <ul>\n                <li><strong>Game Account Information:</strong> Ensure your PUBG UID or Mobile Legends User ID/Zone ID are correct</li>\n                <li><strong>Package Selection:</strong> Verify you are purchasing the correct game and currency amount</li>\n                <li><strong>Payment Amount:</strong> Confirm the Pi amount and USD equivalent before proceeding</li>\n                <li><strong>Account Access:</strong> Ensure you have access to the game account where currency will be delivered</li>\n                <li><strong>Game Version:</strong> Verify you are playing the correct version of the game (Global, regional, etc.)</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>4. Exceptional Circumstances</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>While our general policy is no refunds, we may consider exceptions in very limited circumstances:</p>\n              <ul>\n                <li><strong>Technical Failure:</strong> If our system fails to deliver currency due to a technical error on our end</li>\n                <li><strong>Wrong Currency Type:</strong> If we deliver the wrong type of currency due to a system error</li>\n                <li><strong>Duplicate Charges:</strong> If you are accidentally charged multiple times for the same purchase</li>\n                <li><strong>Service Outage:</strong> If our service is down but we still process your payment</li>\n              </ul>\n              <p><strong>Note:</strong> Exceptions require investigation and may take 5-10 business days to resolve.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>5. What is NOT Eligible for Refund</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>The following situations are NOT eligible for refunds:</p>\n              <ul>\n                <li>Change of mind after purchase</li>\n                <li>Incorrect game account information provided by user</li>\n                <li>Loss of game account access after currency delivery</li>\n                <li>Game account suspension or ban by game publishers</li>\n                <li>Fluctuations in Pi cryptocurrency value</li>\n                <li>User dissatisfaction with the purchased game</li>\n                <li>Technical issues with the game itself (not our service)</li>\n                <li>Forgetting about automatic purchases or subscriptions</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>6. Delivery Guarantee</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>While we maintain a no-refund policy, we guarantee delivery of your purchased gaming currency:</p>\n              <ul>\n                <li><strong>Delivery Time:</strong> Currency is typically delivered within 5-10 minutes</li>\n                <li><strong>Delivery Confirmation:</strong> You will receive email confirmation when currency is delivered</li>\n                <li><strong>Support Assistance:</strong> If delivery is delayed, contact our support team immediately</li>\n                <li><strong>Tracking:</strong> All transactions are tracked and can be verified</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>7. Dispute Resolution Process</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>If you believe you qualify for an exception to our no-refund policy:</p>\n              <ol>\n                <li><strong>Contact Support:</strong> Email us at info@b4uesports.com within 24 hours of purchase</li>\n                <li><strong>Provide Information:</strong> Include your transaction ID, Pi payment ID, and detailed explanation</li>\n                <li><strong>Investigation:</strong> Our team will investigate your claim within 48 hours</li>\n                <li><strong>Documentation:</strong> Provide any requested screenshots or additional information</li>\n                <li><strong>Decision:</strong> We will provide a final decision within 5 business days</li>\n                <li><strong>Resolution:</strong> If approved, resolution will be completed within 7 business days</li>\n              </ol>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>8. Chargeback Policy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Due to the nature of cryptocurrency transactions through Pi Network:</p>\n              <ul>\n                <li>Traditional credit card chargebacks are not applicable</li>\n                <li>Pi Network transactions are irreversible by design</li>\n                <li>Disputes must be resolved through our support system</li>\n                <li>We do not process payment reversals through Pi Network</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>9. Customer Support</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>For assistance with purchases or delivery issues:</p>\n              <div className=\"bg-muted p-4 rounded-lg mt-4\">\n                <p><strong>B4U Esports Support</strong></p>\n                <p>Email: <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n                <p>Phone: <a href=\"tel:+97517875099\" className=\"text-primary\">+975 17875099</a></p>\n                <p>Response Time: Within 24 hours</p>\n                <p>Available: 24/7 for urgent delivery issues</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>10. Policy Updates</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We may update this Refund Policy to reflect changes in our services or legal requirements. Updates will be:</p>\n              <ul>\n                <li>Posted on our website with updated date</li>\n                <li>Communicated to users via email</li>\n                <li>Effective immediately upon posting</li>\n                <li>Applied to future transactions only</li>\n              </ul>\n              <p>Your continued use of our services constitutes acceptance of any policy changes.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>11. Legal Framework</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>This Refund Policy is governed by:</p>\n              <ul>\n                <li>Laws of Bhutan regarding digital commerce</li>\n                <li>International best practices for digital goods</li>\n                <li>Pi Network's terms and conditions</li>\n                <li>Game publishers' policies and requirements</li>\n              </ul>\n              <p>This policy is designed to be fair while protecting the integrity of digital currency transactions.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11107},"client/src/pages/terms-of-service.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"terms-of-service-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Terms of Service</h1>\n          <p className=\"text-muted-foreground\">Last updated: January 2025</p>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. Acceptance of Terms</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>By accessing and using B4U Esports services, you agree to be bound by these Terms of Service. If you disagree with any part of these terms, you may not access our services. Your continued use of our platform constitutes acceptance of any updates or modifications to these terms.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>2. Service Description</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>B4U Esports provides a digital marketplace for purchasing in-game currencies using Pi Network's cryptocurrency. Our services include:</p>\n              <ul>\n                <li>Purchase of PUBG Mobile UC (Unknown Cash)</li>\n                <li>Purchase of Mobile Legends: Bang Bang Diamonds</li>\n                <li>Pi Network payment integration</li>\n                <li>Real-time pricing and currency conversion</li>\n                <li>Transaction history and account management</li>\n                <li>Customer support services</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Account Registration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>To use our services, you must:</p>\n              <ul>\n                <li>Have a valid Pi Network account</li>\n                <li>Be at least 13 years old (or the minimum age in your jurisdiction)</li>\n                <li>Provide accurate and complete information</li>\n                <li>Maintain the security of your account credentials</li>\n                <li>Accept responsibility for all activities under your account</li>\n                <li>Notify us immediately of any unauthorized access</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>4. Pi Network Integration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Our platform integrates with Pi Network for authentication and payments:</p>\n              <ul>\n                <li><strong>Testnet Mode:</strong> During development, transactions use Pi Testnet tokens with no real value</li>\n                <li><strong>Mainnet Mode:</strong> Production transactions use real Pi cryptocurrency</li>\n                <li><strong>Authentication:</strong> We verify your identity through Pi Network's secure systems</li>\n                <li><strong>Payment Processing:</strong> All transactions are processed through Pi Network's infrastructure</li>\n                <li><strong>Security:</strong> We implement Pi Network's recommended security practices</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>5. Purchasing Terms</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>When making purchases through our platform:</p>\n              <ul>\n                <li><strong>Pricing:</strong> All prices are displayed in Pi cryptocurrency with USD equivalents</li>\n                <li><strong>Payment:</strong> Payments are processed immediately upon confirmation</li>\n                <li><strong>Delivery:</strong> Gaming currency is delivered to your specified game account within 5-10 minutes</li>\n                <li><strong>Verification:</strong> You must provide accurate game account information</li>\n                <li><strong>Confirmation:</strong> You will receive email confirmation of all purchases</li>\n                <li><strong>Support:</strong> Contact us immediately if delivery fails or is delayed</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>6. User Responsibilities</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>As a user of our services, you agree to:</p>\n              <ul>\n                <li>Provide accurate game account information</li>\n                <li>Use the service only for legitimate gaming purposes</li>\n                <li>Not attempt to circumvent our security measures</li>\n                <li>Not use the service for any illegal activities</li>\n                <li>Respect intellectual property rights</li>\n                <li>Not interfere with other users' access to the service</li>\n                <li>Comply with applicable laws and regulations</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>7. Prohibited Activities</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>The following activities are strictly prohibited:</p>\n              <ul>\n                <li>Fraudulent transactions or payment reversals</li>\n                <li>Using stolen or unauthorized payment methods</li>\n                <li>Creating multiple accounts to abuse promotions</li>\n                <li>Attempting to hack or compromise our systems</li>\n                <li>Reselling purchased gaming currency</li>\n                <li>Using automated tools or bots</li>\n                <li>Violating game publishers' terms of service</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>8. Intellectual Property</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>All content on our platform is protected by intellectual property laws:</p>\n              <ul>\n                <li><strong>B4U Esports:</strong> Our brand, logo, and platform design are our property</li>\n                <li><strong>Game Content:</strong> PUBG Mobile and Mobile Legends content belongs to their respective publishers</li>\n                <li><strong>Pi Network:</strong> Pi Network logos and branding are used with permission</li>\n                <li><strong>User Content:</strong> You retain rights to your personal information and account data</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>9. Disclaimers and Limitations</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Our services are provided \"as is\" without warranties:</p>\n              <ul>\n                <li><strong>Service Availability:</strong> We do not guarantee uninterrupted service</li>\n                <li><strong>Game Integration:</strong> We are not responsible for changes to game publishers' systems</li>\n                <li><strong>Pi Network:</strong> We are not responsible for Pi Network technical issues</li>\n                <li><strong>Market Fluctuations:</strong> Pi currency values may fluctuate</li>\n                <li><strong>Third-Party Services:</strong> We are not liable for third-party service failures</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>10. Limitation of Liability</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>To the maximum extent permitted by law, B4U Esports shall not be liable for:</p>\n              <ul>\n                <li>Indirect, incidental, or consequential damages</li>\n                <li>Loss of profits, data, or business opportunities</li>\n                <li>Damages exceeding the amount paid for services</li>\n                <li>Issues arising from user error or negligence</li>\n                <li>Third-party actions or service interruptions</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>11. Termination</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We may terminate or suspend your account for:</p>\n              <ul>\n                <li>Violation of these Terms of Service</li>\n                <li>Fraudulent or suspicious activity</li>\n                <li>Repeated customer service issues</li>\n                <li>Legal requirements or safety concerns</li>\n              </ul>\n              <p>Upon termination, your access to services will cease, but completed transactions remain valid.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>12. Governing Law</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>These Terms of Service are governed by the laws of Bhutan. Any disputes will be resolved through:</p>\n              <ul>\n                <li>Good faith negotiation</li>\n                <li>Mediation if necessary</li>\n                <li>Arbitration in Thimphu, Bhutan</li>\n                <li>Courts of competent jurisdiction in Bhutan</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>13. Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>For questions about these Terms of Service, contact us:</p>\n              <div className=\"bg-muted p-4 rounded-lg mt-4\">\n                <p><strong>B4U Esports</strong></p>\n                <p>Email: <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n                <p>Phone: <a href=\"tel:+97517875099\" className=\"text-primary\">+975 17875099</a></p>\n                <p>We will respond to all inquiries within 48 hours.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11220},"client/src/pages/user-agreement.tsx":{"content":"import Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport ParticleBackground from '@/components/particle-background';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function UserAgreement() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" data-testid=\"user-agreement-page\">\n      <ParticleBackground />\n      <Navigation isTestnet={import.meta.env.DEV} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">User Agreement</h1>\n          <p className=\"text-muted-foreground\">Last updated: January 2025</p>\n        </div>\n\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. Agreement Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>This User Agreement (\"Agreement\") is a legally binding contract between you (\"User\") and B4U Esports (\"Company,\" \"we,\" \"us,\" or \"our\"). By creating an account or using our services, you acknowledge that you have read, understood, and agree to be bound by all terms and conditions contained in this Agreement.</p>\n              <p>This Agreement governs your access to and use of our Pi Network-integrated gaming marketplace platform, including all features, content, and services offered through our website and applications.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>2. User Eligibility and Account Creation</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>To use our services, you must:</p>\n              <ul>\n                <li><strong>Age Requirements:</strong> Be at least 13 years old, or the minimum age in your jurisdiction</li>\n                <li><strong>Pi Network Account:</strong> Have a valid, active Pi Network account in good standing</li>\n                <li><strong>Legal Capacity:</strong> Have the legal capacity to enter into binding agreements</li>\n                <li><strong>Accurate Information:</strong> Provide truthful, accurate, and complete information</li>\n                <li><strong>Compliance:</strong> Comply with all applicable laws and regulations</li>\n                <li><strong>Single Account:</strong> Maintain only one account per person</li>\n              </ul>\n              <p>We reserve the right to verify your identity and eligibility at any time.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>3. User Obligations and Responsibilities</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>As a user of our platform, you agree to:</p>\n              <h4>Account Security:</h4>\n              <ul>\n                <li>Maintain the confidentiality of your login credentials</li>\n                <li>Use strong, unique passwords for your accounts</li>\n                <li>Enable two-factor authentication when available</li>\n                <li>Immediately notify us of any unauthorized access</li>\n                <li>Accept responsibility for all activities under your account</li>\n              </ul>\n              <h4>Lawful Use:</h4>\n              <ul>\n                <li>Use our services only for legitimate gaming purposes</li>\n                <li>Comply with all applicable laws and regulations</li>\n                <li>Respect the intellectual property rights of others</li>\n                <li>Not engage in any fraudulent or deceptive practices</li>\n                <li>Not use our services for money laundering or illegal activities</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>4. Game Account Verification and Accuracy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>You are solely responsible for providing accurate game account information:</p>\n              <ul>\n                <li><strong>PUBG Mobile:</strong> Correct IGN (In-Game Name) and UID (User ID)</li>\n                <li><strong>Mobile Legends:</strong> Accurate User ID and Zone ID</li>\n                <li><strong>Verification:</strong> Double-check all information before confirming purchases</li>\n                <li><strong>Updates:</strong> Keep your game account information current in your profile</li>\n                <li><strong>Consequences:</strong> Incorrect information may result in failed delivery or loss of purchase</li>\n                <li><strong>No Refunds:</strong> We are not responsible for delivery failures due to incorrect user-provided information</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>5. Payment Terms and Pi Network Integration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Our payment system is integrated with Pi Network:</p>\n              <h4>Payment Processing:</h4>\n              <ul>\n                <li>All payments are processed through Pi Network's secure infrastructure</li>\n                <li>Transactions are recorded on the Pi blockchain</li>\n                <li>Payment confirmation is required before service delivery</li>\n                <li>Real-time pricing reflects current Pi/USD exchange rates</li>\n              </ul>\n              <h4>User Responsibilities:</h4>\n              <ul>\n                <li>Ensure sufficient Pi balance before making purchases</li>\n                <li>Verify transaction details before confirming payment</li>\n                <li>Understand that blockchain transactions are irreversible</li>\n                <li>Accept current market pricing at the time of purchase</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>6. Service Availability and Performance</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We strive to provide reliable service, but you acknowledge:</p>\n              <ul>\n                <li><strong>Availability:</strong> Services may be temporarily unavailable due to maintenance or technical issues</li>\n                <li><strong>Performance:</strong> Service speed and reliability may vary based on network conditions</li>\n                <li><strong>Third-Party Dependencies:</strong> Our services depend on Pi Network and game publisher systems</li>\n                <li><strong>Updates:</strong> We may update or modify our services without prior notice</li>\n                <li><strong>Compatibility:</strong> Services may not be compatible with all devices or browsers</li>\n                <li><strong>Geographic Limitations:</strong> Some features may not be available in all locations</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>7. Prohibited Activities and Conduct</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>The following activities are strictly prohibited:</p>\n              <h4>Fraudulent Activities:</h4>\n              <ul>\n                <li>Using stolen or unauthorized payment methods</li>\n                <li>Creating false identities or impersonating others</li>\n                <li>Attempting to reverse or chargeback completed transactions</li>\n                <li>Manipulating pricing or payment systems</li>\n              </ul>\n              <h4>Technical Violations:</h4>\n              <ul>\n                <li>Attempting to hack, crack, or compromise our systems</li>\n                <li>Using automated tools, bots, or scripts</li>\n                <li>Reverse engineering our software or services</li>\n                <li>Interfering with other users' access to services</li>\n              </ul>\n              <h4>Commercial Violations:</h4>\n              <ul>\n                <li>Reselling gaming currency purchased through our platform</li>\n                <li>Using our services for commercial purposes without authorization</li>\n                <li>Creating multiple accounts to abuse promotions or limits</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>8. Intellectual Property Rights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>You acknowledge and agree that:</p>\n              <ul>\n                <li><strong>Our Content:</strong> All B4U Esports content, including design, text, graphics, and software, is our property</li>\n                <li><strong>Game Content:</strong> PUBG Mobile and Mobile Legends content belongs to their respective publishers</li>\n                <li><strong>Pi Network:</strong> Pi Network logos and content are used under license</li>\n                <li><strong>Limited License:</strong> We grant you a limited, non-exclusive license to use our services</li>\n                <li><strong>Restrictions:</strong> You may not copy, modify, distribute, or create derivative works</li>\n                <li><strong>Feedback:</strong> Any feedback you provide may be used by us without compensation</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>9. Privacy and Data Usage</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>Your privacy is important to us. By using our services, you consent to:</p>\n              <ul>\n                <li>Collection and processing of personal data as outlined in our Privacy Policy</li>\n                <li>Sharing necessary information with game publishers for service delivery</li>\n                <li>Use of cookies and tracking technologies to improve our services</li>\n                <li>Communication from us regarding your account and transactions</li>\n                <li>Data transfer to third-party service providers for operational purposes</li>\n                <li>Retention of transaction records for legal and compliance purposes</li>\n              </ul>\n              <p>Please review our Privacy Policy and Data Protection Policy for detailed information.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>10. Disclaimers and Limitation of Liability</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>You understand and agree that:</p>\n              <h4>Service Disclaimers:</h4>\n              <ul>\n                <li>Services are provided \"as is\" without warranties of any kind</li>\n                <li>We do not guarantee uninterrupted or error-free service</li>\n                <li>We are not responsible for third-party service failures</li>\n                <li>Game publisher policies and systems are beyond our control</li>\n              </ul>\n              <h4>Limitation of Liability:</h4>\n              <ul>\n                <li>Our liability is limited to the amount paid for the specific transaction</li>\n                <li>We are not liable for indirect, incidental, or consequential damages</li>\n                <li>You release us from claims arising from your use of our services</li>\n                <li>These limitations apply to the fullest extent permitted by law</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>11. Account Termination and Suspension</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We may terminate or suspend your account for:</p>\n              <ul>\n                <li>Violation of this Agreement or our policies</li>\n                <li>Fraudulent or suspicious activity</li>\n                <li>Violation of applicable laws or regulations</li>\n                <li>Abuse of our customer support systems</li>\n                <li>Multiple disputes or chargebacks</li>\n                <li>Extended inactivity (with prior notice)</li>\n              </ul>\n              <p>Upon termination, your access to services will cease, but completed transactions remain valid. You may also terminate your account at any time by contacting our support team.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>12. Dispute Resolution and Governing Law</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>This Agreement is governed by the laws of Bhutan. For dispute resolution:</p>\n              <h4>Resolution Process:</h4>\n              <ol>\n                <li><strong>Direct Communication:</strong> Contact our support team first</li>\n                <li><strong>Good Faith Negotiation:</strong> Attempt to resolve disputes amicably</li>\n                <li><strong>Mediation:</strong> Use neutral mediation if direct negotiation fails</li>\n                <li><strong>Arbitration:</strong> Binding arbitration in Thimphu, Bhutan</li>\n                <li><strong>Legal Action:</strong> Court proceedings only after exhausting other options</li>\n              </ol>\n              <h4>Limitations:</h4>\n              <ul>\n                <li>Claims must be filed within one year of the dispute arising</li>\n                <li>Class action lawsuits are not permitted</li>\n                <li>Disputes must be resolved individually</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>13. Agreement Modifications</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>We may modify this Agreement to reflect:</p>\n              <ul>\n                <li>Changes in our services or business practices</li>\n                <li>Legal or regulatory requirements</li>\n                <li>Industry standards and best practices</li>\n                <li>User feedback and platform improvements</li>\n              </ul>\n              <p>We will notify you of material changes through:</p>\n              <ul>\n                <li>Email notifications to your registered address</li>\n                <li>Prominent notices on our platform</li>\n                <li>Updated agreement with revision date</li>\n              </ul>\n              <p>Continued use of our services after changes constitutes acceptance of the modified Agreement.</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>14. Contact Information and Support</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert max-w-none\">\n              <p>For questions about this Agreement or our services:</p>\n              <div className=\"bg-muted p-4 rounded-lg mt-4\">\n                <p><strong>B4U Esports Customer Support</strong></p>\n                <p>Email: <a href=\"mailto:info@b4uesports.com\" className=\"text-primary\">info@b4uesports.com</a></p>\n                <p>Phone: <a href=\"tel:+97517875099\" className=\"text-primary\">+975 17875099</a></p>\n                <p>Response Time: Within 24 hours</p>\n                <p>Emergency Support: Available 24/7 for transaction issues</p>\n              </div>\n              <p className=\"mt-4\">By using our services, you acknowledge that you have read, understood, and agree to be bound by this User Agreement in its entirety.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16290},"client/src/types/pi-network.ts":{"content":"export interface PiUser {\n  uid: string;\n  username: string;\n  roles: string[];\n}\n\nexport interface PaymentData {\n  amount: number;\n  memo: string;\n  metadata: {\n    type: 'backend';\n    userId: string;\n    packageId: string;\n    gameAccount: Record<string, string>;\n    [key: string]: any;\n  };\n}\n\nexport interface PaymentCallbacks {\n  onReadyForServerApproval: (paymentId: string) => void;\n  onReadyForServerCompletion: (paymentId: string, txid: string) => void;\n  onCancel: (paymentId: string) => void;\n  onError: (error: Error, payment?: PaymentDTO) => void;\n}\n\nexport interface PaymentDTO {\n  identifier: string;\n  user_uid: string;\n  amount: number;\n  memo: string;\n  metadata: Record<string, any>;\n  from_address: string;\n  to_address: string;\n  direction: 'user_to_app' | 'app_to_user';\n  created_at: string;\n  network: 'Pi Testnet' | 'Pi Network';\n  status: {\n    developer_approved: boolean;\n    transaction_verified: boolean;\n    developer_completed: boolean;\n    cancelled: boolean;\n    user_cancelled: boolean;\n  };\n  transaction: null | {\n    txid: string;\n    verified: boolean;\n    _link: string;\n  };\n}\n\nexport interface PiPrice {\n  price: number;\n  lastUpdated: Date;\n}\n\nexport interface Package {\n  id: string;\n  game: string;\n  name: string;\n  inGameAmount: number;\n  usdtValue: string;\n  image: string;\n  isActive: boolean;\n  piPrice?: number;\n  currentPiPrice?: number;\n}\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  phone: string;\n  country: string;\n  language: string;\n  walletAddress: string;\n  gameAccounts?: {\n    pubg?: { ign: string; uid: string };\n    mlbb?: { userId: string; zoneId: string };\n  };\n  referralCode?: string;\n}\n\nexport interface Transaction {\n  id: string;\n  userId: string;\n  packageId: string;\n  paymentId: string;\n  txid?: string;\n  piAmount: string;\n  usdAmount: string;\n  piPriceAtTime: string;\n  status: string;\n  gameAccount: Record<string, string>;\n  metadata?: Record<string, any>;\n  emailSent: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n","size_bytes":2036},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}